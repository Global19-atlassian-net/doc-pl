<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: 1.14 Maintainer: shutdownrunner Status: ready -->
<!-- $Revision: 1.1 $ -->
 <chapter id="faq.languages">
  <title>PHP i inne języki</title>
  <titleabbrev>PHP i inne języki</titleabbrev>

  <para>
   PHP jest najlepszym językiem do zastosowań sieciowych,
   ale co z innymi językami?
  </para>

  <qandaset>
   <qandaentry id="faq.languages.asp">
    <question>
     <para>PHP vs. ASP?</para>
    </question>
    <answer>
     <para>
      ASP nie jest tak naprawdę językiem programowania, ale skrótem od Active Server Pages.
      W rzeczywistości ASP programuje się przy użyciu języków Visual Basic
      oraz JScript. Największą wadą ASP jest fakt, że działa on wyłącznie na
      Internet Information Server(IIS) firmy Microsoft. Ogranicza to możliwość zastosowania
      ASP wyłącznie do serwerów bazujących na systemie Win32. Istnieje kilka projektów mających
      na celu umożliwienie uruchamiania ASP w innych środowiskach i serwerach:
      <ulink url="&url.instantasp;">InstantASP</ulink>
      firmy <ulink url="&url.halcyon;">Halcyon</ulink> (komercyjny),
      Chili!Soft ASP firmy 
      <ulink url="&url.chilisoft;">Chili!Soft</ulink> (komercyjny).
      Mówi się, że ASP jest wolniejszy, mniej wygodny oraz nie tak stabilny jak PHP.
      Do zalet ASP można zaliczyć fakt, że używa on języka VBScript, którego osoba umiejąca już
      programować w języku Visual Basic jest w stanie bardzo szybko się nauczyć. Obsługa ASP
      jest domyślnie włączona na serwerach IIS co znacznie ułatwia jego instalację oraz użtkowanie.
      Ilość komponentów napisanych w ASP jest bardzo ograniczona, co oznacza, że jeśli chcesz
      używać "zaawansowanych" funkcji jak np. współpraca z serwerami FTP będziesz musiał
      dokupić dodatkowe komponenty.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.languages.aspconverter">
    <question>
     <para>Czy można skonwertować ASP na PHP?</para>
    </question>
    <answer>
     <para>
      Tak. Do najczęściej wymienianych narzędzi tego typu należą działający
      po stronie serwera <ulink url="&url.asp2php;">asp2php</ulink> oraz
      <ulink url="&url.asptranslator;">to rozwiązanie</ulink> działające po stronie klienta.
      </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.languages.coldfusion">
    <question>
     <para>PHP vs. Cold Fusion?</para>
    </question>
    <answer>
     <para>
      Mówi się, że PHP jest znacznie szybszy oraz wydajniejszy w bardziej
      złożonych zadaniach oraz przy wypróbowywaniu nowych pomysłów. Przez
      wielu PHP jest określany jako stabilniejszy oraz mniej zasobożerny. 
      Do zalet Cold Fusion należy lepsza obsługa błędów, abstrakcja baz 
      danych oraz przetwarzanie danych. Jeśli chodzi o abstrakcję baz danych
      poświęcono jej więcej uwagi w PHP 4. Choć do mocnych stron Cold Fusion należy
      wspaniały silnik wyszukiwarki nie jest to coś czego oczekuje się od języka
      skryptowego do zastosowań sieciowych. PHP działa na praktycznie wszystkich 
      platformach, podczas gdy Cold Fusion jest obsługiwany jedynie przez systemy
      Win32, Solaris, Linux oraz HP/UX. Cold Fusion ma bardzo dobry IDE dzięki
      czemu jest łatwy w obsłudze nawet dla początkującego użytkownika, natomiast 
      PHP wymaga większych umiejętności programistycznych. PHP jest
      przeznaczony dla programistów, podczas gdy Cold Fusion został
      stworzony z myślą o pozostałych osobach. 
     </para>
     <para>
      A great summary by Michael J Sheldon on this topic has
      been posted to the PHP mailing list. A copy can be found 
      at <ulink url="&url.coldfusion.summary;">&url.coldfusion.summary;</ulink>.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.languages.perl">
    <question>
     <para>PHP vs. Perl?</para>
    </question>
    <answer>
     <para>
      The biggest advantage of PHP over Perl is that PHP was designed for
      scripting for the web where Perl was designed to do a lot more and can
      because of this get very complicated. The flexibility / complexity
      of Perl makes it easier to write code that another author / coder
      has a hard time reading. PHP has a less confusing and stricter format
      without losing flexibility. PHP is easier to integrate into existing
      HTML than Perl. PHP has pretty much all the 'good' functionality of
      Perl: constructs, syntax and so on, without making it as complicated
      as Perl can be. Perl is a very tried and true language, it's been
      around since the late eighties, but PHP is maturing very quickly.
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
