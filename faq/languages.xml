<?xml version="1.0" encoding="iso-8859-2"?>
<!-- EN-Revision: 1.14 Maintainer: shutdownrunner Status: ready -->
<!-- $Revision: 1.2 $ -->
 <chapter id="faq.languages">
  <title>PHP i inne jêzyki</title>
  <titleabbrev>PHP i inne jêzyki</titleabbrev>

  <para>
   PHP jest najlepszym jêzykiem do zastosowañ sieciowych,
   ale co z innymi jêzykami?
  </para>

  <qandaset>
   <qandaentry id="faq.languages.asp">
    <question>
     <para>PHP vs. ASP?</para>
    </question>
    <answer>
     <para>
      ASP nie jest tak naprawdê jêzykiem programowania, ale skrótem od Active Server Pages.
      W rzeczywisto¶ci ASP programuje siê przy u¿yciu jêzyków Visual Basic
      oraz JScript. Najwiêksz± wad± ASP jest fakt, ¿e dzia³a on wy³±cznie na
      Internet Information Server(IIS) firmy Microsoft. Ogranicza to mo¿liwo¶æ zastosowania
      ASP wy³±cznie do serwerów bazuj±cych na systemie Win32. Istnieje kilka projektów maj±cych
      na celu umo¿liwienie uruchamiania ASP w innych ¶rodowiskach i serwerach:
      <ulink url="&url.instantasp;">InstantASP</ulink>
      firmy <ulink url="&url.halcyon;">Halcyon</ulink> (komercyjny),
      Chili!Soft ASP firmy 
      <ulink url="&url.chilisoft;">Chili!Soft</ulink> (komercyjny).
      Mówi siê, ¿e ASP jest wolniejszy, mniej wygodny oraz nie tak stabilny jak PHP.
      Do zalet ASP mo¿na zaliczyæ fakt, ¿e u¿ywa on jêzyka VBScript, którego osoba umiej±ca ju¿
      programowaæ w jêzyku Visual Basic jest w stanie bardzo szybko siê nauczyæ. Obs³uga ASP
      jest domy¶lnie w³±czona na serwerach IIS co znacznie u³atwia jego instalacjê oraz u¿tkowanie.
      Ilo¶æ komponentów napisanych w ASP jest bardzo ograniczona, co oznacza, ¿e je¶li chcesz
      u¿ywaæ "zaawansowanych" funkcji jak np. wspó³praca z serwerami FTP bêdziesz musia³
      dokupiæ dodatkowe komponenty.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.languages.aspconverter">
    <question>
     <para>Czy mo¿na skonwertowaæ ASP na PHP?</para>
    </question>
    <answer>
     <para>
      Tak. Do najczê¶ciej wymienianych narzêdzi tego typu nale¿± dzia³aj±cy
      po stronie serwera <ulink url="&url.asp2php;">asp2php</ulink> oraz
      <ulink url="&url.asptranslator;">to rozwi±zanie</ulink> dzia³aj±ce po stronie klienta.
      </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.languages.coldfusion">
    <question>
     <para>PHP vs. Cold Fusion?</para>
    </question>
    <answer>
     <para>
      Mówi siê, ¿e PHP jest znacznie szybszy oraz wydajniejszy w bardziej
      z³o¿onych zadaniach oraz przy wypróbowywaniu nowych pomys³ów. Przez
      wielu PHP jest okre¶lany jako stabilniejszy oraz mniej zasobo¿erny. 
      Do zalet Cold Fusion nale¿y lepsza obs³uga b³êdów, abstrakcja baz 
      danych oraz przetwarzanie danych. Je¶li chodzi o abstrakcjê baz danych
      po¶wiêcono jej wiêcej uwagi w PHP 4. Choæ do mocnych stron Cold Fusion nale¿y
      wspania³y silnik wyszukiwarki nie jest to co¶ czego oczekuje siê od jêzyka
      skryptowego do zastosowañ sieciowych. PHP dzia³a na praktycznie wszystkich 
      platformach, podczas gdy Cold Fusion jest obs³ugiwany jedynie przez systemy
      Win32, Solaris, Linux oraz HP/UX. Cold Fusion ma bardzo dobry IDE dziêki
      czemu jest ³atwy w obs³udze nawet dla pocz±tkuj±cego u¿ytkownika, natomiast 
      PHP wymaga wiêkszych umiejêtno¶ci programistycznych. PHP jest
      przeznaczony dla programistów, podczas gdy Cold Fusion zosta³
      stworzony z my¶l± o pozosta³ych osobach. 
     </para>
     <para>
      A great summary by Michael J Sheldon on this topic has
      been posted to the PHP mailing list. A copy can be found 
      at <ulink url="&url.coldfusion.summary;">&url.coldfusion.summary;</ulink>.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.languages.perl">
    <question>
     <para>PHP vs. Perl?</para>
    </question>
    <answer>
     <para>
      The biggest advantage of PHP over Perl is that PHP was designed for
      scripting for the web where Perl was designed to do a lot more and can
      because of this get very complicated. The flexibility / complexity
      of Perl makes it easier to write code that another author / coder
      has a hard time reading. PHP has a less confusing and stricter format
      without losing flexibility. PHP is easier to integrate into existing
      HTML than Perl. PHP has pretty much all the 'good' functionality of
      Perl: constructs, syntax and so on, without making it as complicated
      as Perl can be. Perl is a very tried and true language, it's been
      around since the late eighties, but PHP is maturing very quickly.
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
