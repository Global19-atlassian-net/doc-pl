<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: pirate Status: ready -->
<!-- $Revision$ -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Stałe</title>

  <simpara>
   Stałe są to nazwy, identyfikujące proste wartości. Jak sama nazwa 
   wskazuje, nie mogą się one zmieniać w trakcie wykonywania skryptu 
   (wyjątkiem są <link linkend="language.constants.predefined">
   magiczne stałe</link>, które własciwie nie sa stałymi). 
   W nazwach stałych domyślnie rozróżniana jest wielkość liter. 
   Zgodnie z ogólnie przyjętą konwencją, nazwy stałych zawsze pisane sa wielkimi literami.
  </simpara>
  <para>
   Nazwy stałych obowiązują identyczne zasady, jak w przypadku wszystkich innych etykiet. 
   Poprawna nazwa stałej zaczyna się od litery lub podkreślnika, po których następuje 
   dowolna ilość liter, cyfr i podkreślników. Jako wyrażenie regularne, określone 
   zostałoby to następująco: 
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  &tip.userlandnaming;
  <para>
   <example>
    <title>Poprawne i niepoprawne nazwy stałych</title>
    <programlisting role="php">
<![CDATA[
<?php

// Poprawne nazwy stałych
define("FOO",     "something");
define("FOO2",    "something else");
define("FOO_BAR", "something more");

// Niepoprawne nazwy stałych
define("2FOO",    "something");

// Pomimo tego, że poniższy zapis jest poprawny, powinno się go unikać:
// PHP może kiedyś zawierać magiczną stałą,
// która zepsuje Twój skrypt
define("__FOO__", "something"); 

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Dla naszych celów, literami są a-z, A-Z, oraz znaki ASCII 
    z przedziału od 127 do 255 (0x7f-0xff).
   </simpara>
  </note>

  <simpara>
   Podobnie jak &link.superglobals;, zasięg stałych jest globalny.  
   Można sie odwoływać do nich w każdym miejscu pliku, nie przejmując sie zasięgiem.  
   Więcej informacji na ten temat znajdziesz w rozdziale pt. 
   <link linkend="language.variables.scope">zasięg zmiennych</link>.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>Składnia</title>
   <simpara>
    Możesz zdefiniować stałą, używając funkcji 
    <function>define</function>. Raz zdefiniowana stała 
    nie może byc zmieniona ani usunięta.
   </simpara>
   <simpara>
    Stałe mogą zawierać jedynie dane skalarne 
    (<type>boolean</type>, <type>integer</type>, 
    <type>float</type> oraz <type>string</type>) 
    Stałe nie mogą być typu <type>resource</type>.
   </simpara>
   <simpara>
    Wartość stałej otrzymujemy, używając jej nazwy.
    W przeciwieństwie do zmiennych, nazw stałych <emphasis>nie</emphasis> poprzedzamy
    znakiem <literal>$</literal>.
    Możesz także użyć funkcji <function>constant</function> do 
    odczytania wartości stałej, jeśli chcesz wygenerować jej nazwę
    dynamicznie. 
    Aby uzyskać listę wszystkich zdefiniowanych stałych, użyj <function>get_defined_constants</function>.
    
   </simpara>
   <note>
    <simpara>
     Stałe i zmienne globalne operują w różnych przestrzeniach nazw. 
     Oznacza to, że na przykład &true; i 
     <varname>$TRUE</varname> oznaczają co innego.
    </simpara>
   </note>
   <simpara>
    Jeśli używasz niezdefiniowanej stałej, PHP traktuje to, jak gdybyś chciał
    użyć nazwy stałej jako wartości typu <type>string</type> (STAŁA a "STAŁA").
    Błąd typu
    <link linkend="ref.errorfunc">E_NOTICE</link> zostanie wywołany,
    kiedy to się stanie.  Przeczytaj także, dlaczego 
    <link linkend="language.types.array.foo-bar">$foo[bar]</link> jest
    niepoprawne (jeśli nie zdefiniujesz
    <literal>bar</literal> jako stałej).  Chcąc sprawdzić,
    czy dana stała istnieje, użyj funkcji <function>defined</function>.
   </simpara>
   <para>
    Oto różnice pomiędzy stałymi i zmiennymi:
    <itemizedlist>
     <listitem>
      <simpara>
       Nazwy stałych nie są poprzedzone znakiem dolara (<literal>$</literal>);
       
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Stałe mogą zostać zdefiniowane jedynie przy użyciu funkcji
       <function>define</function> a nie poprzez zwykłe przypisanie;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Stałe mogą być definiowane i używane wszędzie, niezależnie
       od zasięgu zmiennych;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Stałe nie mogą być zmieniane ani usuwane jeśli raz zostały ustawione
       ; oraz
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Stałe mogą zawierać jedynie wartości skalarne.
       </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>Definiowanie stałych</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // wypisuje "Hello world."
echo Constant; // wypisuje "Constant" i wywoułuje ostrzeżenie.
?>
]]>
     </programlisting>
    </example>

   </para>

   <simpara>
    Zobacz także <link linkend="language.oop5.constants">Stałe Klas</link>.
   </simpara>
  </sect1>
  
  <sect1 xml:id="language.constants.predefined">
   <title>Magiczne stałe</title>

   <simpara>
    PHP zapewnia szeroki zakres <link
    linkend="reserved.constants">predefiniowanych stałych</link> każdemu
    skryptowi, który jest uruchamiany. Wiele z tych stałych jest jednak dostępnych
    dzieki różnym rozszerzeniom i można z nich korzystać jedynie, kiedy te rozszerzenia
    sa dostępne przez dynamiczne załadowanie, badź też
    zostały wkompilowane.
   </simpara>
   
   <para>
    Istnieje siedem magicznych stałych, które zmieniają sie w zależności
    od tego, gdzie są użyte.  Na przykład, wartość
    <constant>__LINE__</constant> zależy od linii, w której ta 
    stała została użyta. Nazwy tych magicznych stałych 
    są niezależne od wielkości liter:
   </para>
   <para>
    <table>
     <title>Kilka "magicznych" stałych PHP</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Nazwa</entry>
        <entry>Opis</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><constant>__LINE__</constant></entry>
        <entry>
         Aktualna linia pliku.
        </entry>
       </row>
       <row>
        <entry><constant>__FILE__</constant></entry>
        <entry>
         Pełna scieżka i nazwa pliku.  Jeśli użyta wewnątrz dołączonego pliku,
         jego nazwa jest zwracana.
         Od PHP 4.0.2, <constant>__FILE__</constant>zawsze zawiera
         bezwzględną scieżkę z rozwiązanymi dowiązaniami symbolicznymi, podczas kiedy w starszych wersjach
         czasem zawierała scieżkę względną.
        </entry>
       </row>
       <row>
        <entry><constant>__DIR__</constant></entry>
        <entry>
         Nazwa katalogu pliku.  Jeśli użyta wewnątrz dołączonego pliku,
         zwraca nazwę jego katalogu. Odpowiada 
         <literal>dirname(__FILE__)</literal>. Zwracana nazwa nie zawiera
         końcowego ukośnika, chyba że jest to katalog root.
         (Dodano w PHP 5.3.0.)
        </entry>
       </row>
       <row>
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         Nazwa funkcji. (Dodano w PHP 4.3.0)  W PHP 5 ta stała 
         zwraca nazwę funkcji tak jak ją zadeklarowano (z uwzględnieniem wielkości liter), podczas
         kiedy w PHP 4 zwracana wartość zawiera jedynie małe litery.
        </entry>
       </row>
       <row>
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         Nazwa klasy. (Dodano w PHP 4.3.0)  W PHP 5 ta stała 
         zwraca nazwę klasy tak jak ją zadeklarowano (z uwzględnieniem wielkości liter), podczas
         kiedy w PHP 4 zwracana wartość zawiera jedynie małe litery.
        </entry>
       </row>
       <row>
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         Nazwa metody. (Dodano w PHP 5.0.0) Nazwa metody zwracana jest
         tak jak ją zadeklarowano (z uwzględnieniem wielkości liter).
        </entry>
       </row>
       <row>
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         Nazwa aktualnej przestrzeni nazw (z uwzględnieniem wielkości liter). Ta stała 
         definiowana jest w czasie kompilacji (Dodano w PHP 5.3.0).
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Zobacz także 
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
