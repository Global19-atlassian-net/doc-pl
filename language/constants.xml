<?xml version="1.0" encoding="iso-8859-2"?>
<!-- EN-Revision: 1.47 Maintainer: yagood Status: ready -->
<!-- $Revision: 1.14 $ -->
 <chapter id="language.constants">
  <title>Sta³e</title>

  <simpara>
   Sta³a jest identyfikatorem (nazw±) dla prostej warto¶ci. Jak sama
   nazwa wskazuje, warto¶æ ta nie mo¿e siê zmieniaæ podczas dzia³ania
   skryptu (poza <link linkend="language.constants.predefined">magicznymi sta³ymi</link>,
   które na w³a¶ciwie nie s± sta³ymi).
   Domy¶lnie, przy sta³ych uwzglêdniana jest wielko¶æ liter. Przyjêto, ¿e
   sta³e s± pisane du¿ymi literami.
  </simpara>
  <para>
   Nazwa sta³ej podlega takim samym zasadom jak ka¿da inna w PHP.
   Prawid³owa nazwa sta³ej rozpoczyna siê liter±, znakiem podkre¶lenia
   ("_"), nastêpnie mog± wystêpowaæ litery, cyfry lub znaki podkre¶lenia.
   Dobrze reprezentuje to takie wyra¿enie regularne:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  &tip.userlandnaming;
  <para> 
   <example> 
    <title>Prawid³owe i nieprawid³owe nazwy sta³ych</title> 
    <programlisting role="php"> 
<![CDATA[ 
<?php 
     
// Poprawne nazwy sta³ych 
define("FOO",     "cokolwiek"); 
define("FOO2",    "cokolwiek innego"); 
define("FOO_BAR", "cokolwiek wiecej"); 
     
// Nieprawid³owa nazwa sta³ej 
define("2FOO",    "cokolwiek"); 
     
// To jest prawid³owe, ale powinno byæ unikane:
// PHP mo¿e pewnego dnia wprowdziæ magicz± sta³±
// która spowoduje za³amanie Twojego skryptu	
	 
define("__FOO__", "cokolwiek"); 
     
?> 
]]> 
     </programlisting> 
    </example> 
   </para> 
  <note>
   <simpara>
    Na nasze potrzeby, litery to a-z, A-Z, oraz znaki ASCII
    od 127 do 255 (0x7f-0xff).
   </simpara>
  </note>
  
  <simpara>
   Tak jak i &link.superglobals;, zasiêg sta³ych jest globalny.  Mo¿esz
   odwo³aæ siê do sta³ych w dowolnym miejscu w Twojego skryptu, bez uwa¿ania na zasiêg.
   Wiêcej informacji na temat zasiêgu, przeczytasz w sekcji podrêcznika
   <link linkend="language.variables.scope">zasiêg zmiennych</link>. 
  </simpara>
  <sect1 id="language.constants.syntax">
   <title>Sk³adnia</title>
   <simpara>
    Mo¿esz definiowaæ sta³± u¿ywaj±c funkcji <function>define</function>.
    Kiedy sta³a zostanie zdefiniowana, nie mo¿e byæ ju¿ zmieniona albo
    undefined.
   </simpara>
   
   <simpara>
    Tylko skalarne typy danych (<type>boolean</type>, <type>integer</type>, <type>float</type>
    i <type>string</type>) mog± byæ zawarte w sta³ych.
	Nie definiuj sta³ych typu <type>zasób</type>.
   </simpara>
   <simpara>
    Mo¿esz u¿yæ warto¶ci sta³ej poprzez zwyk³e u¿ycie jej nazwy.
    Inaczej ni¿ przy zmiennych, w sta³ych <emphasis>NIE</emphasis>
    powiniene¶ prepend sta³ej znakiem <literal>$</literal>.
    Mo¿esz tak¿e u¿yæ funkcji <function>constant</function>, aby
    odczytaæ warto¶æ sta³ej, której nazwa jest przekazywana dynamicznie.
    U¿yj funkcji <function>get_defined_constants</function> aby otrzymaæ
    listê zdefiniowanych sta³ych.
   </simpara>
   <note>
    <simpara>
     Sta³e i globlane zmienne s± pisane inaczej, a to oznacza, ¿e np.
     &true; i <varname>$TRUE</varname> s± ró¿ne.
    </simpara>
   </note>
   <simpara>
    Je¶li u¿yjesz niezdefiniowanej sta³ej, PHP przyjmuje, ¿e chcesz u¿yæ
    nazwy sta³ej samej w sobie, poprostu tak jakby¶ wywo³a³ j± jako
    <type>string</type> (STALA kontra "STALA"). Je¶li to nast±pi zostanie
    wygenerowany b³±d z poziomu <link linkend="ref.errorfunc">E_NOTICE</link>.
    Zobacz tak¿e w podrêczniku artyku³ o tym dlaczego
    <link linkend="language.types.array.foo-bar">$foo[bar]</link> jest b³êdne
    (chyba, ¿e wcze¶niej zdefiniujesz <function>define</function>
    <literal>bar</literal> jako sta³±).  Je¶li, chcesz sprawdziæ czy sta³a jest
    ustawiona, u¿yj funkcji <function>defined</function>.   
   </simpara>
   <para>
    Ró¿nice pomiêdzy sta³ymi, a zmiennymi:
    <itemizedlist>
     <listitem>
      <simpara>
       Sta³e nie maj± znaku dolara (<literal>$</literal>) przed nazw±;
      </simpara> 
     </listitem> 
     <listitem> 
      <simpara> 
       Sta³e mog± byæ zdefiniowane wy³±cznie u¿ywaj±c funkcji 
       <function>define</function>, nie przez proste przypisanie; 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Sta³e mog± byæ definiowane oraz u¿ywane wszêdzie bez zwa¿ania na
       zasady dotycz±ce zakresu ich dostêpno¶ci;
      </simpara>
      </listitem>
      <listitem>
       <simpara>
        Sta³e nie mog± byæ redefiniowane lub undefined po tym jak raz zosta³y
        zdefiniowane; i
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Sta³e mog± zawieraæ tylko warto¶ci skalarne.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>

   <para>
    <example>
     <title>Definiowanie sta³ych</title>
     <programlisting role="php">
<![CDATA[
<?php
define("STALA", "Hello world!");
echo STALA; // wy¶wietli "Hello world!"
echo Stala; // wy¶wietli "Stala" i zg³osi ostrze¿enie
?>
]]>
     </programlisting>
    </example>

   </para>
      <simpara>
      Patrz tak¿e <link linkend="language.oop5.constants">Sta³e klasowe</link>.
      </simpara>
     </sect1>
 
   <sect1 id="language.constants.predefined">
    <title>Magiczne sta³e</title>

    <simpara>
     PHP zapewnia du¿± liczbê <link
     linkend="reserved.constants">predefiniowanych sta³ych</link> ka¿demu 
     uruchamianemu skryptowi. Wiele z tych sta³ych, jednak¿e jest tworzona
     przez rozmaite rozsze¿enia, i mog± byæ jedynie obecne gdy te rozsze¿enia
     s± dostêpne, przez dynamiczne ³adowanie (bibliotek) lub dlatego, ¿e zosta³y one
     wkompilowane.
    </simpara>
    
  <para>
    Istnieje piêæ magicznych sta³ych, których zmiana zale¿y od tego gdzie
    zostan± u¿yte. Np. warto¶æ <constant>__LINE__</constant> zale¿y
   od numeru lini Twojego skryptu gdzie zostanie wstawiona. 
    Specjalne sta³e nie rozró¿niaj± wielkich i ma³ych liter i s± to nastêpuj±ce:  
  </para>

  <para>
    <table>
     <title>Kilka "magicznych" sta³ych PHP</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Nazwa</entry>
        <entry>Opis</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><constant>__LINE__</constant></entry>
        <entry>
		 Bie¿±cy numer lini pliku.
        </entry>
       </row>
       <row>
        <entry><constant>__FILE__</constant></entry>
        <entry>
 	 Pe³na ¶cie¿ka i nazwa pliku. Je¶li zostanie u¿yte w includowanym
	 pliku, zwracana jest nazwa includowanego pliku.
	
	 Od PHP 4.0.2, <constant>__FILE__</constant> zawsze zawiera bezwzglêdn±
	 ¶ciê¿kê, we wcze¶niejszych wersjach zawiera³a w pewnych okoliczno¶ciach
	 ¶cie¿kê wzglêdn±.
	</entry>
       </row>
       <row>
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
	 Nazwa funkcji, (Dodano w PHP 4.3.0) Od PHP 5 ta sta³a zwracana
	 nazwê funkcji tak jak zosta³a ona zadeklarowana (z rozró¿nianiem wielko¶ci znaków).
	 W PHP 4 warto¶æ zawsze by³a zamieniana na ma³e litery.
        </entry>
       </row>
       <row>
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         Nazwa klasy, (Dodano w PHP 4.3.0) Od PHP 5 ta sta³a zwracana
         nazwê klasy tak jak zosta³a ona zadeklarowana (z rozró¿nianiem wielko¶ci znaków).
         W PHP 4 warto¶æ zawsze by³a zamieniana na ma³e litery.
        </entry>
       </row>
       <row>
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         Nazwa metody klasy, (Dodano w PHP 5.0.0) Nazwa metody jest zwracana
         tak jak zosta³a ona zadeklarowana (z rozró¿nianiem wielko¶ci znaków).
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
  <para>
    Patrz tak¿e 
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>
 
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
