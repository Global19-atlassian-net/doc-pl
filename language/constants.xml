<?xml version="1.0" encoding="iso-8859-2"?>
<!-- $Revision: 1.6 $ -->
 <chapter id="language.constants">
  <title>Sta³e</title>

  <simpara>
   Sta³a jest identyfikatorem (nazw±) dla prostej warto¶ci. Jak sama
   nazwa wskazuje, warto¶æ ta nie mo¿e siê zmieniaæ podczas dzia³ania
   skryptu (poza wyj±tkami: <constant>__FILE__</constant>
   i <constant>__LINE__</constant>). Domy¶lnie, przy sta³ych
   uwzglêdniana jest wielko¶æ liter. Przyjêto, ¿e sta³e s± pisane du¿ymi
   literami.
  </simpara>
  <para>
   Nazwa sta³ej podlega takim samym zasadom jak ka¿da inna w PHP.
   Prawid³owa nazwa sta³ej rozpoczyna siê liter±, znakiem podkre¶lenia
   ("_"), nastêpnie mog± wystêpowaæ litery, cyfry lub znaki podkre¶lenia.
   Dobrze reprezentuje to takie wyra¿enie regularne:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>

   <!-- TODO: Example of valid & invalid constant names -->
  </para>

  <note>
   <simpara>
    Na nasze potrzeby, litery to a-z, A-Z, oraz znaki ASCII
    od 127 do 255 (0x7f-0xff).
   </simpara>
  </note>
  <simpara>
   Zakres sta³ej jest globalny.
  </simpara>
  <sect1 id="language.constants.syntax">
   <title>Sk³adnia</title>
   <simpara>
    Mo¿esz definiowaæ sta³± u¿ywaj±c funkcji <function>define</function>.
    Kiedy sta³a zostanie zdefiniowana, nie mo¿e byæ ju¿ zmieniona albo
    undefined.
   </simpara>
   <simpara>
    Tylko skalarne typy danych
    (<type>boolean</type>, <type>integer</type>, <type>double</type>
    i <type>string</type>) mog± byæ zawarte w sta³ych.
   </simpara>
   <simpara>
    Mo¿esz u¿yæ warto¶ci sta³ej poprzez zwyk³e u¿ycie jej nazwy.
    Inaczej ni¿ przy zmiennych, w sta³ych <emphasis>NIE</emphasis>
    powiniene¶ prepend sta³ej znakiem <literal>$</literal>.
    Mo¿esz tak¿e u¿yæ funkcji <function>constant</function>, aby
    odczytaæ warto¶æ sta³ej, której nazwa jest przekazywana dynamicznie.
    U¿yj funkcji <function>get_defined_constants</function> aby otrzymaæ
    listê zdefiniowanych sta³ych.
   </simpara>
   <note>
    <simpara>
     Sta³e i globlane zmienne s± pisane inaczej, a to oznacza, ¿e np.
     &true; i <varname>$TRUE</varname> s± ró¿ne.
    </simpara>
   </note>
   <simpara>
    Je¶li u¿yjesz niezdefiniowanej sta³ej, PHP przyjmuje, ¿e chcesz u¿yæ
    nazwy sta³ej samej w sobie. Zostanie wtedy wys³ane
    <link linkend="features.error-handling">ostrze¿enie</link>.
    U¿yj funkcji <function>defined</function> je¶li chcesz siê dowiedzieæ
    czy sta³a jest zdefiniowana.
   </simpara>
   <para>
    Ró¿nice pomiêdzy sta³ymi, a zmiennymi:
     <itemizedlist>
      <listitem>
       <simpara>
    Sta³e nie maj± znaku dolara (<literal>$</literal>) przed nazw±;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    Sta³e mog± byæ definiowane oraz u¿ywane wszêdzie bez zwa¿ania na
    zasady dotycz±ce zakresu ich dostêpno¶ci;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    Sta³e nie mog± byæ redefiniowane lub undefined po tym jak raz zosta³y
    zdefiniowane; i
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    Sta³e mog± zawieraæ tylko warto¶ci skalarne.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>

   <para>
    <example>
     <title>Definiowanie sta³ych</title>
     <programlisting role="php">
&lt;?php
define("STALA", "Hello world!");
echo STALA; // wy¶wietli "Hello world!"
echo Stala; // wy¶wietli "Stala" i zg³osi ostrze¿enie
?&gt;
     </programlisting>
    </example>

   </para>

  </sect1>

  <sect1 id="language.constants.predefined">
   <title>Predefiniowane sta³e</title>
  <para>
   Predefiniowanymi sta³ymi (zawsze dostêpnymi) s±:

   <variablelist>

    <varlistentry>
     <term>__FILE__  (niewa¿na wielko¶æ liter)</term>
     <listitem>
      <simpara>
       Nazwa pliku ze skryptem PHP, który jest aktualnie parsowany
       (przetwarzany); sta³a u¿yta w pliku, który zosta³, który zosta³
       w³±czony (include) lub jest wymagany (require), zwraca nazwê
       tego w³a¶nie pliku, a nie nazwê pliku g³ównego.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>__LINE__  (niewa¿na wielko¶æ liter)</term>
     <listitem>
      <simpara>
       Numer linii w pliku, który jest aktualnie parsowany (przetwarzany).
       Sta³a u¿yta w pliku w³±czonym (include) zwraca pozycjê w tym pliku.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>PHP_VERSION</term>
     <listitem>
      <simpara>
       £añcuch reprezentuj±cy aktualnie u¿ywan± wersjê parsera PHP, np.
       '4.0.7-dev'.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>PHP_OS</term>
     <listitem>
      <simpara>
       Nazwa systemu operacyjnego, na którym uruchomiony jest parser
       PHP. Mo¿liwe warto¶ci to:
       "AIX", "Darwin" (MacOS), "Linux", "SunOS", "WIN32", "WINNT".
       Uwaga: inne warto¶ci równie¿ mog± byæ dostêpne.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>&true;  (niewa¿na wielko¶æ liter)</term>
     <listitem>
      <simpara>
       Warto¶æ &true; (zobacz: typ <type>boolean</type>).
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>&false;  (niewa¿na wielko¶æ liter)</term>
     <listitem>
      <simpara>
       Warto¶æ &false; (zobacz: typ<type>boolean</type>).
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>&null;  (niewa¿na wielko¶æ liter)</term>
     <listitem>
      <simpara>
       Warto¶æ &null; (zobacz: typ <type>null</type>).
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>E_ERROR</term>
     <listitem>
      <simpara>
       Oznacza b³±d inny ni¿ b³±d przy parsowaniu (przetwarzaniu),
       którego naprawienie nie jest mo¿liwe.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>E_WARNING</term>
     <listitem>
      <simpara>
       Oznacza stan, w którym PHP "wie", ¿e co¶ jest ¼le, ale
       kontynuuje dzia³anie; b³êdy takie mog± byæ przechwycone przez sam
       skrypt.
       Przyk³adem mo¿e byæ nieprawid³owe wyra¿enie regularne w funkcji
       <function>ereg</function>.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>E_PARSE</term>
     <listitem>
      <simpara>
       Parser stan±³ przy nieprawid³owej sk³adni w skrypcie. Naprawa
       b³êdu i kontynuacja nie jest mo¿liwa.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>E_NOTICE</term>
     <listitem>
      <simpara>
       Zdarzy³o siê co¶ co mo¿e acz nie musi byæ b³êdem. PHP kontynuuje
       dzia³anie. Przyk³adem mo¿e byæ u¿ywanie niepodanego ³añcucha jako
       indeksu w tablicy albo ¿adanie dostêpu do niezadeklarowanej
       zmiennej.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>E_ALL</term>
     <listitem>
      <simpara>
       Wszystkie sta³e E_* w jednej. Je¶li sta³a ta zostanie u¿yta z
       funkcj± <function>error_reporting</function>, spowoduje to, ¿e
       jakiekolwiek problemy zauwa¿one przez PHP bêd± zg³aszane przez
       funkcjê.
      </simpara>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>

   <para>
    Sta³e <literal>E_*</literal> s± zwykle u¿ywane z funkcj±
    <function>error_reporting</function> aby ustawiæ poziom zg³aszania
    b³êdów. Zobacz wszystkie takie sta³e w rozdziale
    <link linkend="features.error-handling">Obs³uga b³êdów</link>.

    <example>
     <title>U¿ywanie __FILE__ i __LINE__</title>
     <programlisting role="php">
&lt;?php
function report_error($plik, $linia, $komunikat)
{
    echo "Wyst±pi³ b³±d w $plik w linii $linia: $komunikat.";
}

report_error(__FILE__, __LINE__, "Co¶ posz³o ¼le!");
?&gt;
     </programlisting>
    </example>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
