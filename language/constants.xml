<?xml version="1.0" encoding="iso-8859-2"?>
<!-- EN-Revision: n/a Maintainer: pirate Status: ready -->
<!-- $Revision$ -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Sta³e</title>

  <simpara>
   Sta³e s± to nazwy, identyfikuj±ce proste warto¶ci. Jak sama nazwa 
   wskazuje, nie mog± siê one zmieniaæ w trakcie wykonywania skryptu 
   (wyj±tkiem s± <link linkend="language.constants.predefined">
   magiczne sta³e</link>, które w³asciwie nie sa sta³ymi). 
   W nazwach sta³ych domy¶lnie rozró¿niana jest wielko¶æ liter. 
   Zgodnie z ogólnie przyjêt± konwencj±, nazwy sta³ych zawsze pisane sa wielkimi literami.
  </simpara>
  <para>
   Nazwy sta³ych obowi±zuj± identyczne zasady, jak w przypadku wszystkich innych etykiet. 
   Poprawna nazwa sta³ej zaczyna siê od litery lub podkre¶lnika, po których nastêpuje 
   dowolna ilo¶æ liter, cyfr i podkre¶lników. Jako wyra¿enie regularne, okre¶lone 
   zosta³oby to nastêpuj±co: 
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  &tip.userlandnaming;
  <para>
   <example>
    <title>Poprawne i niepoprawne nazwy sta³ych</title>
    <programlisting role="php">
<![CDATA[
<?php

// Poprawne nazwy sta³ych
define("FOO",     "something");
define("FOO2",    "something else");
define("FOO_BAR", "something more");

// Niepoprawne nazwy sta³ych
define("2FOO",    "something");

// Pomimo tego, ¿e poni¿szy zapis jest poprawny, powinno siê go unikaæ:
// PHP mo¿e kiedy¶ zawieraæ magiczn± sta³±,
// która zepsuje Twój skrypt
define("__FOO__", "something"); 

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Dla naszych celów, literami s± a-z, A-Z, oraz znaki ASCII 
    z przedzia³u od 127 do 255 (0x7f-0xff).
   </simpara>
  </note>

  <simpara>
   Podobnie jak &link.superglobals;, zasiêg sta³ych jest globalny.  
   Mo¿na sie odwo³ywaæ do nich w ka¿dym miejscu pliku, nie przejmuj±c sie zasiêgiem.  
   Wiêcej informacji na ten temat znajdziesz w rozdziale pt. 
   <link linkend="language.variables.scope">zasiêg zmiennych</link>.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>Sk³adnia</title>
   <simpara>
    Mo¿esz zdefiniowaæ sta³±, u¿ywaj±c funkcji 
    <function>define</function>. Raz zdefiniowana sta³a 
    nie mo¿e byc zmieniona ani usuniêta.
   </simpara>
   <simpara>
    Sta³e mog± zawieraæ jedynie dane skalarne 
    (<type>boolean</type>, <type>integer</type>, 
    <type>float</type> oraz <type>string</type>) 
    Sta³e nie mog± byæ typu <type>resource</type>.
   </simpara>
   <simpara>
    Warto¶æ sta³ej otrzymujemy, u¿ywaj±c jej nazwy.
    W przeciwieñstwie do zmiennych, nazw sta³ych <emphasis>nie</emphasis> poprzedzamy
    znakiem <literal>$</literal>.
    Mo¿esz tak¿e u¿yæ funkcji <function>constant</function> do 
    odczytania warto¶ci sta³ej, je¶li chcesz wygenerowaæ jej nazwê
    dynamicznie. 
    Aby uzyskaæ listê wszystkich zdefiniowanych sta³ych, u¿yj <function>get_defined_constants</function>.
    
   </simpara>
   <note>
    <simpara>
     Sta³e i zmienne globalne operuj± w ró¿nych przestrzeniach nazw. 
     Oznacza to, ¿e na przyk³ad &true; i 
     <varname>$TRUE</varname> oznaczaj± co innego.
    </simpara>
   </note>
   <simpara>
    Je¶li u¿ywasz niezdefiniowanej sta³ej, PHP traktuje to, jak gdyby¶ chcia³
    u¿yæ nazwy sta³ej jako warto¶ci typu <type>string</type> (STA£A a "STA£A").
    B³±d typu
    <link linkend="ref.errorfunc">E_NOTICE</link> zostanie wywo³any,
    kiedy to siê stanie.  Przeczytaj tak¿e, dlaczego 
    <link linkend="language.types.array.foo-bar">$foo[bar]</link> jest
    niepoprawne (je¶li nie zdefiniujesz
    <literal>bar</literal> jako sta³ej).  Chc±c sprawdziæ,
    czy dana sta³a istnieje, u¿yj funkcji <function>defined</function>.
   </simpara>
   <para>
    Oto ró¿nice pomiêdzy sta³ymi i zmiennymi:
    <itemizedlist>
     <listitem>
      <simpara>
       Nazwy sta³ych nie s± poprzedzone znakiem dolara (<literal>$</literal>);
       
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Sta³e mog± zostaæ zdefiniowane jedynie przy u¿yciu funkcji
       <function>define</function> a nie poprzez zwyk³e przypisanie;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Sta³e mog± byæ definiowane i u¿ywane wszêdzie, niezale¿nie
       od zasiêgu zmiennych;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Sta³e nie mog± byæ zmieniane ani usuwane je¶li raz zosta³y ustawione
       ; oraz
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Sta³e mog± zawieraæ jedynie warto¶ci skalarne.
       </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>Definiowanie sta³ych</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // wypisuje "Hello world."
echo Constant; // wypisuje "Constant" i wywou³uje ostrze¿enie.
?>
]]>
     </programlisting>
    </example>

   </para>

   <simpara>
    Zobacz tak¿e <link linkend="language.oop5.constants">Sta³e Klas</link>.
   </simpara>
  </sect1>
  
  <sect1 xml:id="language.constants.predefined">
   <title>Magiczne sta³e</title>

   <simpara>
    PHP zapewnia szeroki zakres <link
    linkend="reserved.constants">predefiniowanych sta³ych</link> ka¿demu
    skryptowi, który jest uruchamiany. Wiele z tych sta³ych jest jednak dostêpnych
    dzieki ró¿nym rozszerzeniom i mo¿na z nich korzystaæ jedynie, kiedy te rozszerzenia
    sa dostêpne przez dynamiczne za³adowanie, bad¼ te¿
    zosta³y wkompilowane.
   </simpara>
   
   <para>
    Istnieje siedem magicznych sta³ych, które zmieniaj± sie w zale¿no¶ci
    od tego, gdzie s± u¿yte.  Na przyk³ad, warto¶æ
    <constant>__LINE__</constant> zale¿y od linii, w której ta 
    sta³a zosta³a u¿yta. Nazwy tych magicznych sta³ych 
    s± niezale¿ne od wielko¶ci liter:
   </para>
   <para>
    <table>
     <title>Kilka "magicznych" sta³ych PHP</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Nazwa</entry>
        <entry>Opis</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><constant>__LINE__</constant></entry>
        <entry>
         Aktualna linia pliku.
        </entry>
       </row>
       <row>
        <entry><constant>__FILE__</constant></entry>
        <entry>
         Pe³na scie¿ka i nazwa pliku.  Je¶li u¿yta wewn±trz do³±czonego pliku,
         jego nazwa jest zwracana.
         Od PHP 4.0.2, <constant>__FILE__</constant>zawsze zawiera
         bezwzglêdn± scie¿kê z rozwi±zanymi dowi±zaniami symbolicznymi, podczas kiedy w starszych wersjach
         czasem zawiera³a scie¿kê wzglêdn±.
        </entry>
       </row>
       <row>
        <entry><constant>__DIR__</constant></entry>
        <entry>
         Nazwa katalogu pliku.  Je¶li u¿yta wewn±trz do³±czonego pliku,
         zwraca nazwê jego katalogu. Odpowiada 
         <literal>dirname(__FILE__)</literal>. Zwracana nazwa nie zawiera
         koñcowego uko¶nika, chyba ¿e jest to katalog root.
         (Dodano w PHP 5.3.0.)
        </entry>
       </row>
       <row>
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         Nazwa funkcji. (Dodano w PHP 4.3.0)  W PHP 5 ta sta³a 
         zwraca nazwê funkcji tak jak j± zadeklarowano (z uwzglêdnieniem wielko¶ci liter), podczas
         kiedy w PHP 4 zwracana warto¶æ zawiera jedynie ma³e litery.
        </entry>
       </row>
       <row>
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         Nazwa klasy. (Dodano w PHP 4.3.0)  W PHP 5 ta sta³a 
         zwraca nazwê klasy tak jak j± zadeklarowano (z uwzglêdnieniem wielko¶ci liter), podczas
         kiedy w PHP 4 zwracana warto¶æ zawiera jedynie ma³e litery.
        </entry>
       </row>
       <row>
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         Nazwa metody. (Dodano w PHP 5.0.0) Nazwa metody zwracana jest
         tak jak j± zadeklarowano (z uwzglêdnieniem wielko¶ci liter).
        </entry>
       </row>
       <row>
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         Nazwa aktualnej przestrzeni nazw (z uwzglêdnieniem wielko¶ci liter). Ta sta³a 
         definiowana jest w czasie kompilacji (Dodano w PHP 5.3.0).
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Zobacz tak¿e 
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
