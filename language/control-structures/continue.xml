<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 55713d3fa09bd9702d8fcca5ddc60e5f304bbef7 Maintainer: sobak Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="control-structures.continue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>continue</literal></title>
 <?phpdoc print-version-for="continue"?>
 <simpara>
  <literal>continue</literal> jest używane wewnątrz pętli do
  pominięcia aktualnej iteracji i kontynuacji wykonywnania
  w momencie wykonywania warunków, a później kolejnej iteracji.
 </simpara>
 <note>
  <simpara>
   Zauważ, że w PHP
   <link linkend="control-structures.switch">switch</link> jest traktowany
   jak wyrażenie pętlowe, dla potrzeb
   <literal>continue</literal>.
  </simpara>
 </note>
 <simpara>
  <literal>continue</literal> akceptuje opcjoalny argument numeryczny,
  który mówi, jak wiele poziomów pętli powinien on pominąć.
  Domyślną wartością jest <literal>1</literal>, więc następuje przeskok
  do końca obecnej pętli.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
while (list($key, $value) = each($arr)) {
    if (!($key % 2)) { // pomiń klucze nieparzyste
        continue;
    }
    do_something_odd($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Na zewnątrz<br />\n";
    while (1) {
        echo "Na środku<br />\n";
        while (1) {
            echo "Wewnątrz<br />\n";
            continue 3;
        }
        echo "To nigdy nie zostanie wyświetlone.<br />\n";
    }
    echo "Tak samo jak to.<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Pominięcie średnika po <literal>continue</literal> może prowadzić
  do pomyłek. To jest przykład, tego, czego nie powinieneś robić.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
for ($i = 0; $i < 5; ++$i) {
    if ($i == 2)
        continue
    print "$i\n";
}
?>
]]>
   </programlisting>
   <para>
    Można przypuszczać, że wynikiem będzie:
   </para>
   <screen>
<![CDATA[
0
1
3
4
]]>
   </screen>
   <para>
    jednak ten skrypt wyświetli:
   </para>
   <screen>
<![CDATA[
2
]]>
   </screen>
   <para>
    ponieważ całe <literal>continue print "$i\n";</literal> jest wykonywane
    jako jedno wyrażenie, więc <function>print</function> jest wywoływane,
    tylko gdy <literal>$i == 2</literal> jest prawdą. Wartość zwracana przez
    <literal>print</literal> jest przekazywana do <literal>continue</literal> jako
    argument numeryczny.
   </para>
  </informalexample>
 </para>
 <para>
  <table>
   <title>Wykaz zmian dla <literal>continue</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>5.4.0</entry>
      <entry>
       <literal>continue 0;</literal> nie jest dłużej poprawne. W poprzednich wersjach było
       interpretowane tak samo jak <literal>continue 1;</literal>.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Usunięto możliwość przekazania zmiennej (np. <literal>$num = 2; continue $num;</literal>),
       jako argumentu numerycznego.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
