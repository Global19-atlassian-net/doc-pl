<?xml version="1.0" encoding="iso-8859-2"?>
<!-- EN-Revision: 290385 Maintainer: adi Status: ready -->
<!-- $Revision$ -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Podstawowa sk³adnia</title>
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>Wyskakiwanie z HTMLa</title>
   <para>
    Kiedy PHP przetwarza plik, szuka otwieraj±cych i zamykaj±cych znaczników (tagów),
    które mówi± PHP o rozpoczêciu i zakoñczeniu interpretowania kodu pomiêdzy
    nimi. Przetwarzanie w taki sposób pozwala zagnie¿dzaæ php w dowolnym
    rodzaju dokumentów, poniewa¿ wszystko poza par±
    znaczników, otwieraj±cym i zamykaj±cym jest ignorowane przez parser PHP.
    Najczê¶ciej zobaczysz php zagnie¿dzone w dokumentach HTML,
    tak jak w tym przyk³adzie.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>To zostanie zignorowane.</p>
<?php echo 'Kiedy to zostanie przetworzone.'; ?>
<p>To równie¿ zostanie zignorowane.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Mo¿esz tak¿e u¿yæ bardziej zaawansowanej struktury:
    <example>
     <title>Zaawansowane wyskakiwanie</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($wyrazenie) { 
    ?>
    <strong>To jest prawda.</strong>
    <?php 
} else { 
    ?>
    <strong>To jest fa³sz.</strong>
    <?php 
}
?>
]]>
     </programlisting>
    </example>
    To dzia³a jak siê spodziewano, poniewa¿ kiedy PHP natrafi na zamykaj±cy 
    znacznik ?&gt;, poprostu zaczyna wy¶wietlaæ cokolwiek znajdzie (z wyj±tkiem
    bezpo¶rednio nastêpuj±cej nowej linii - zobacz
    <link linkend="language.basic-syntax.instruction-separation">oddzielanie instrukcji</link>
    ) dopóki nie natrafi
    na kolejny otwieraj±cy znacznik. Podany przyk³ad jest oczywi¶cie przekombinowany,
    ale do wy¶wietlania du¿ych bloków tekstu, wychodzenie z trybu przetwarzania PHP
    jest zasadniczo bardziej efektywne ni¿ wysy³anie ca³ego tekstu przez
    funkcje <function>echo</function> lub
    <function>print</function>.  
   </para>
   <para>
    Mamy cztery ró¿ne pary otwieraj±cych i zamykaj±cych znaczników,
    które mog± byæ u¿yte w php. Dwie z nich, &lt;?php ?&gt; i
    &lt;script language="php"&gt; &lt;/script&gt; s± zawsze dostêpne.
    Dwie nastêpne to krótkie znaczniki i znaczniki w stylu
    <productname>ASP</productname>, mog± byæ w³±czane i wy³±czane
    w pliku konfiguracyjnym &php.ini;. Czê¶æ osób postrzega krótkie znaczniki
    i znaczniki w stylu <productname>ASP</productname> jako wygodne, jednak¿e
    s± one mniej przeno¶ne, i zasadniczo nie polecane.
    <note>
     <para>
      Zauwa¿ równie¿, ¿e je¶li zagnie¿dzasz PHP w XML lub XHTML
      musisz stosowaæ znaczniki &lt;?php ?&gt; aby pozostaæ
      w zgodzie ze standardami.
     </para>
    </note> 
   </para>
   <para>
    <example>
     <title>Znaczniki otwieraj±ce i zamykaj±ce PHP</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'je¶li chcesz obs³ugiwaæ dokumenty XHTML lub XML, zrób to tak'; ?>

2.  <script language="php">
        echo 'niektóre edytory (jak FrontPage) nie lubi±
              instrukcji przetwarzania';
    </script>

3.  <? echo 'to jest najprostsza instrukcja przetwarzania SGML'; ?>
    <?= wyrazenie ?> To jest skrót dla "<? echo wyrazenie ?>"

4.  <% echo 'Mo¿esz opcjonalnie u¿yæ znaczników w stylu ASP'; %>
    <%= $zmienna; # To jest skrót dla "<% echo . . ." %>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Z pokazanych znaczników, pierwszy i drugi przyk³ad s± zawsze
    dostêpne, pierwszy przyk³ad jest najbardziej powszechny i 
    rekomendowany. 
   </para>
   <para>
    Krótkie znaczniki (trzeci przyk³ad) s± dostepne jedynie, kiedy s±
    w³±czone za pomoc± dyrektywy konfiguracyjnej <link linkend="ini.short-open-tag">short_open_tag</link>
    w &php.ini; lub je¶li php zosta³o skonfigurowane 
    z opcj± <option>--enable-short-tags</option>.
   </para>    
   <para>
    Znaczniki w stylu <productname>ASP</productname> (czwarty przyk³ad) s± dostêpne jedynie gdy 
    zostan± w³±czone poprzez dyrektywê konfiguracyjn±
    <link linkend="ini.asp-tags">asp_tags</link> w &php.ini;
   </para>
   <para>
    <note>
     <para>
      Powiniene¶ unikaæ u¿ywania krótkich znaczników, kiedy rozwijasz aplikacje
      lub biblioteki, które s± nastawione na rozpowszechnianie lub pracujesz
      na serwerach PHP, nad którymi nie masz kontroli, poniewa¿ krótkie znaczniki
      mog± nie byæ obs³ugiwane na docelowym serwerze. Dla przeno¶nego,
      rozpowszechnialnego kodu, miej pewno¶æ, aby nie u¿yæ krotkich znaczników.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>Oddzielanie instrukcji</title>
   <para>
    Podobnie jak C i Perl, PHP wymaga aby instrukcje by³y zakoñczone
    ¶rednikiem, na koñcu ka¿dego wyra¿enia. Zamykaj±cy znacznik bloku
    kodu PHP automatycznie implikuje ¶rednik; nie musisz mieæ
    ¶rednika zamykaj±cego ostatni± liniê z bloku PHP. Zamykaj±cy znacznik
    dla bloku bêdzie zawieraæ bezpo¶rednio nastêpuj±c± now± linie je¶li
    taka istnieje.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'To jest test';
?>

<?php echo 'To jest test' ?>

<?php echo 'Pomineli¶my ostatni zamykaj±cy znacznik';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      Zamykaj±cy znacznik bloku PHP na koñcu pliku jest opcjonalny,
      i w niektórych przypadkach pominiêcie jego jest pomocne kiedy u¿ywamy
      <function>include</function> lub <function>require</function>, tak wiêc
      niechciane bia³e znaki nie bêd± znajdowaæ siê na koñcu pliku, i ci±gle
      bêdzie mo¿liwe dodanie nag³ówków do odpowiedzi. To jest tak¿e porêczne je¶li u¿ywasz
      buferowania wyj¶cia, i nie chcia³by¶ zobaczyæ dodanych niechcianych bia³ych znaków
      na koñcu cze¶ci generowanej przez includowany plik.
     </para>
    </note>
   </para> 
  </sect1>
  <sect1 xml:id="language.basic-syntax.comments">
   <title>Komentarze</title>   
   <para>
    PHP obs³uguje komentarze w stylu 'C', 'C++' i pow³oki Unix (styl Perl\'a). Na przyk³ad:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'To jest test'; // To jest jednoliniowy komentarz w stylu c++
    /* To jest wieloliniowy komentarz
       jeszcze inna linia komentarza */
    echo 'To jest jeszcze jeden test';
    echo 'Ostatni test'; # To jest jednoliniowy komentarz w stylu pow³oki
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    "Jednolinijkowy" styl komentarzy obowi±zuje jedynie do konca
    linii lub bie¿±cego bloku kodu PHP, cokolwiek wyst±pi pierwsze.
    Co oznacza, ¿e kod HTML za <literal>// ... ?&gt;</literal>
    lub  <literal># ...  ?&gt;</literal> ZOSTANIE wy¶wietlony:
    ?&gt; przerywa tryb PHP i wraca do trybu HTML, i  
    <literal>//</literal> lub <literal>#</literal> nie mo¿e wp³yn±æ na to.
    Je¶li, dyrektywa konfiguracyjna <link linkend="ini.asp-tags">asp_tags</link>
    jest w³±czona, to dzia³a tak samo z <literal>// %&gt;</literal> i
    <literal># %&gt;</literal>.
    Jednak¿e, znacznik <literal>&lt;/script&gt;</literal> nie przerywa trybu PHP w
    jednolinijkowym komentarzu.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>To jest <?php # echo 'prosty';?> przyk³ad.</h1>
<p>Nag³owek powy¿ej bêdzie mówi³ 'To jest  przyk³ad'.</p>
]]>
     </programlisting>
    </informalexample> 
   </para>
   <simpara>
    Komentarze w stylu 'C' koñcz± siê na pierwszym napotkanym <literal>*/</literal>.
    Upewnij siê, ¿e nie zagnie¿dzasz komentarzy w stylu 'C'. £atwo jest pope³niæ
    pomy³kê je¶li próbujesz odkomentowaæ du¿y blok kodu.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /* 
    echo 'To jest test'; /* Ten komentarz bêdzie przyczyn± problemów */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
