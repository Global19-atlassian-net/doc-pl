<?xml version="1.0" encoding="iso-8859-2"?>
<!-- $Revision: 1.3 $ -->
 <reference id="ref.url">
  <title>Funkcje URL</title>
  <titleabbrev>URLs</titleabbrev>

  <refentry id="function.base64-decode">
   <refnamediv>
    <refname>base64_decode</refname>
    <refpurpose>Dekoduje dane zakodowane algorytmem MIME base64</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>base64_decode</function></funcdef>
      <paramdef>string <parameter>dane_zakodowane</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>base64_decode</function> dekoduje
     <parameter>dane_zakodowane</parameter> i zwraca oryginaln± postaæ
      danych. Dane wynikowe mog± byæ binarne.
    </para>
    <para>
     Patrz tak¿e: <function>base64_encode</function>, RFC2045 sekcja
     6.8.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.base64-encode">
   <refnamediv>
    <refname>base64_encode</refname>
    <refpurpose>Koduje dane za pomoc± algorytmu MIME base64</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>base64_encode</function></funcdef>
      <paramdef>string <parameter>dane</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>base64_encode</function> zwraca
     <parameter>dane</parameter> zakodowane za pomoc± algorytmu base64.
     Ten sposób kodowania zosta³ zaprojektowany, aby móc bezpiecznie
     przesy³aæ dane binarne, poprzez warstwy transportuj±ce nie
     zaprojektowane do obs³ugi 8 bitowego przesy³ania informacji, np.
     tre¶æ email'i.
    </para>
    <para>
     Dane zakodowane t± funkcj± zajmuj± ok 33% wiêcej miejsca ni¿ dane
     oryginalne.
    </para>
    <para>
     Patrz tak¿e:
     <function>base64_decode</function>,
     <function>chunk_split</function>,
     RFC2045 sekcja 6.8.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.parse-url">
   <refnamediv>
    <refname>parse_url</refname>
    <refpurpose>Przetwarza adres URL i zwraca jego sk³adowe</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>parse_url</function></funcdef>
      <paramdef>string <parameter>url</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Funkcja ta zwraca w tablicy asocjacyjnej wszystkie sk³adowe
     przetwarzanego URL'a.
     Dostêpne s± nastêpuj±ce klucze tablicy:
     "scheme" (protokó³), "host", "port", "user" (u¿ytkownik), "pass" (has³o),
     "path" (¶cie¿ka), "query" (zapytanie) i "fragment" (tre¶æ kotwicy, po #).
    </para>
    <para>
     Patrz tak¿e <function>pathinfo</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rawurldecode">
   <refnamediv>
    <refname>rawurldecode</refname>
    <refpurpose>Dekoduje ³añcuchy zakodowane metod± kodowania URL'i</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>rawurldecode</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca ³añcuch w którym sekwencje dwóch cyfr szesnastkowych
     poprzedzone znakiem procenta (<literal>%</literal>), zast±pione
     s± przez ich odpowiednik znakowy. Na przyk³ad, ³añcuch
     <screen>foo%20bar%40baz</screen> zostanie odkodowany do postaci
     <screen>foo bar@baz</screen>.
    </para>
    <simpara>
     Patrz tak¿e <function>rawurlencode</function>,
     <function>urldecode</function>,
     <function>urlencode</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.rawurlencode">
   <refnamediv>
    <refname>rawurlencode</refname>
    <refpurpose>Koduje URL'e zgodnie z RFC1738</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>rawurlencode</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca ³añcuch w którym wszystkie nie alfanumeryczne znaki
     z wyj±tkiem <screen>-_.</screen> zosta³y zast±pione przez
     dwie cyfry szesnastkowe poprzedzone znakiem procenta
     (<literal>%</literal>). Ten sposób kodowania zosta³ opisany
     w RFC1738. Zabezpiecza dane wej¶ciowe przed zinterpretowaniem
     ich jako znaki specjalne URL'a oraz zabezpiecza URL'e przed
     zniekszta³ceniem ich podczas konwersji znaków dokonywanych
     przez media transmisyjne (np. niektóre systemy pocztowe).
     Na przyk³ad, je¶li chcesz do³±czyæ has³o do URL'a FTP:
     <example>
      <title><function>rawurlencode</function> przyk³ad 1</title>
      <programlisting role="php">
echo '&lt;a href="ftp://user:', rawurlencode('foo @+%/'),
     '@ftp.my.com/x.txt">';
      </programlisting>
     </example>
     Lub, je¶li podajesz informacjê w czê¶ci PATH_INFO (¶cie¿ka) URL'a:
     <example>
      <title><function>rawurlencode</function> przyk³ad 2</title>
      <programlisting role="php">
echo '&lt;a href="http://x.com/department_list_script/',
    rawurlencode('sales and marketing/Miami'), '">';
      </programlisting>
     </example>
    </para>
    <simpara>
     Patrz tak¿e <function>rawurldecode</function>,
     <function>urldecode</function>,
     <function>urlencode</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.urldecode">
   <refnamediv>
    <refname>urldecode</refname>
    <refpurpose>Dekoduje ³añcuchy zakodowane metod± kodowania URL'i</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>urldecode</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Odkodowuje ka¿dy <literal>%<replaceable>##</replaceable></literal>
     kod z danego ³añcucha.  Zwracany jest zdekodowany ³añcuch.
     <example>
      <title><function>urldecode</function> przyk³ad</title>
      <programlisting role="php">
$a = split('&amp;', $QUERY_STRING);
$i = 0;
while ($i &lt; count($a)) {
    $b = split('=', $a[$i]);
    echo 'Warto¶æ parametru ', htmlspecialchars(urldecode($b[0])),
         ' wynosi ', htmlspecialchars(urldecode($b[1])), "&lt;br>";
    $i++;
}
      </programlisting>
     </example>
    </para>
    <para>
     Patrz tak¿e <function>urlencode</function>,
     <function>rawurlencode</function>,
     <function>rawurldecode</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.urlencode">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose>Koduje ³añcuch metod± kodowania URLi</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>urlencode</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca ³añcuch w którym wszystkie nie alfanumeryczne znaki
     z wyj±tkiem <screen>-_.</screen> zosta³y zast±pione przez
     dwie cyfry szesnastkowe poprzedzone znakiem procenta
     (<literal>%</literal>), a spacje kodowane s± jako znak
     (<literal>+</literal>). To kodowanie jest takie same jak
     wykorzystywane przy przesy³aniu danych z formularzy WWW, tj.
     takie samo jak w media typie:
     <literal>application/x-www-form-urlencoded</literal>.
     Ró¿ni siê od kodowania z RFC1738 (zobacz
     <function>rawurlencode</function>) tym, ¿e z powodów historycznych,
     spacje s± kodowane jako znak plus (+).  Funkcja ta jest odpowiednia
     do zakodowania ³añcucha u¿ywanego w zapytaniu URL oraz
     jako zmienna przekazywana do nastêpnej strony:
     <example>
      <title><function>urlencode</function> przyk³ad</title>
      <programlisting role="php">
echo '&lt;a href="mycgi?foo=', urlencode($userinput), '">';
      </programlisting>
     </example>
    </para>
    <para>
    Notka: Uwa¿aj na zmienne, które mog± zawieraæ HTML'owe encje.
    Rzeczy jak &amp;amp, &amp;copy i &amp;pound s± przetwarzane przez
    przegl±darkê i ich aktualna postaæ jest u¿ywana dalej zamiast
    porz±danej nazwy zmiennej.  To jest oczywisty problem, o którym W3C
    informuje ludzi od lat. Referencje s± tutaj:
    <ulink url="&url.argsep;">&url.argsep;</ulink> PHP obs³uguje
    zmianê separatora argumentów na zalecany przez W3C ¶rednik
    poprzez dyrektywê arg_separator .ini.  Niestety wiêkszo¶æ przegl±darek
    nie wysy³a danych z formularza w formacie u¿ywaj±cym ¶rednik jako
    separator. Bardziej przeno¶nym rozwi±zaniem jest u¿ycie &amp;amp;
    jako separatora zamiast &amp;.  Nie musisz zmieniaæ PHP'owego
    arg_separator aby to uzyskaæ.  Zostaw separator jako &amp;, ale
    koduj swoje URL'e u¿ywaj±c
    <function>htmlentities</function>(urlencode($data)).
     <example>
      <title><function>urlencode/htmlentities</function> przyk³ad</title>
      <programlisting role="php">
echo '&lt;a href="mycgi?foo=', htmlentities(urlencode($userinput)), '">';
      </programlisting>
     </example>
    </para>
    <para>
     Patrz tak¿e <function>urldecode</function>,
     <function>htmlentities</function>,
     <function>rawurldecode</function>,
     <function>rawurlencode</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
