<?xml version="1.0" encoding="iso-8859-2"?>
<!-- $Revision: 1.2 $ -->
 <reference id="ref.filesystem">
  <title>Funkcje systemu plików</title>
  <titleabbrev>System plików</titleabbrev>

  <refentry id="function.basename">
   <refnamediv>
    <refname>basename</refname>
    <refpurpose>
     Zwraca nazwê pliku, bêd±cego sk³adow± ¶cie¿ki
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>basename</function></funcdef>
      <paramdef>string <parameter>¶cie¿ka</parameter></paramdef>
      <paramdef>string <parameter><optional>przyrostek</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Z podanego ³añcucha zawieraj±cego ¶cie¿kê do pliku, funkcja
     zwraca sam± nazwê pliku.
     Je¶li koniec nazwy pliku pasuje do parametru <parameter>przyrostek</parameter>
     to zostanie on tak¿e obciêty.
    </para>
    <para>
     W Windows jako separator ¶cie¿ki u¿ywany jest znak slash
     (<literal>/</literal>) i backslash (<literal>\</literal>).  W
     innych ¶rodowiskach jest to slash (<literal>/</literal>).
    </para>
    <para>
     <example>
      <title><function>basename</function> przyk³ad</title>
      <programlisting role="php">
+<![CDATA[
$path = "/home/httpd/html/index.php";
$file = basename ($path);        // $file zawiera "index.php"
$file = basename ($path,".php"); // $file zawiera "index"
+]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Parametr <parameter>przyrostek</parameter> zosta³ dodany w PHP 4.1.0.
     </para>
    </note>
    <para>
     Patrz tak¿e: <function>dirname</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.chgrp">
   <refnamediv>
    <refname>chgrp</refname>
    <refpurpose>Zmienia grupê pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>chgrp</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
      <paramdef>mixed <parameter>grupa</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dokonuje zmiany grupy pliku podanego w parametrze
     <parameter>nazwa_pliku</parameter> na wybran± parametrem
     <parameter>grupa</parameter>. Tylko super u¿ytkownik mo¿e zmieniæ
     dowolnie grupê pliku; inni u¿ytkownicy mog± zmieniæ grupê pliku
     na dowoln± grupê, której cz³onkiem jest ten u¿ytkownik.
    </para>
    <para>
     Zwraca &true; gdy sukces; w przeciwnym wypadku zwraca &false;.
    </para>
    <para>
     Patrz tak¿e <function>chown</function> i
          <function>chmod</function>.
    </para>
    <note>
     <simpara>
      Ta funkcja nie dzia³a w systemach Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.chmod">
   <refnamediv>
    <refname>chmod</refname>
    <refpurpose>Zmienia prawa dostêpu do pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>chmod</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
      <paramdef>int <parameter>prawa</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dokonuje zmiany praw pliku podanego w parametrze
     <parameter>nazwa_pliku</parameter> na podane w
     <parameter>prawa</parameter>.
    </para>
    <para>
     Pamiêtaj, ¿e parametr <parameter>prawa</parameter> nie jest
     automatycznie zastêpowany warto¶ci± oktaln±, wiêc ³añcuchy
     (takie jak "g+w") nie bêd± poprawnie interpretowane.
     Aby zapewniæ poprawno¶æ operacji musisz parametr
     <parameter>prawa</parameter> poprzedziæ prefixem zero (0):
     <informalexample>
      <programlisting role="php">
<![CDATA[
chmod ("/katalog/plik", 755);   // dziesiêtnie; prawdopodobnie nieprawid³owo
chmod ("/katalog/plik", "u+rwx,go+rx"); // ³añcuch; nieprawid³owo
chmod ("/katalog/plik", 0755);  // ósemkowo; poprawna warto¶æ dla praw
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Zwraca &true; gdy sukces i &false; w przeciwnym wypadku.
    </para>
    <para>
     Patrz tak¿e <function>chown</function> i
     <function>chgrp</function>.
    </para>
    <note>
     <simpara>
      Ta funkcja nie dzia³a w systemach Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.chown">
   <refnamediv>
    <refname>chown</refname>
    <refpurpose>Zmienia w³a¶ciciela pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>chown</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
      <paramdef>mixed <parameter>u¿ytkownik</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dokonuje zmiany w³a¶ciciela pliku nazwa_pliku na u¿ytkownika
     podanego w parametrze u¿ytkownik.
     Tylko super u¿ytkownik mo¿e zmieniæ w³a¶ciciela pliku.
    </para>
    <para>
      Zwraca &true; gdy sukces; w przeciwnym wypadku zwraca &false;.
    </para>
    <para>
     Patrz tak¿e <function>chown</function> i
     <function>chmod</function>.
    </para>
    <note>
     <simpara>
     Ta funkcja nie dzia³a w systemach Windows
    </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.clearstatcache">
   <refnamediv>
    <refname>clearstatcache</refname>
    <refpurpose>Czy¶ci cache statystki pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>clearstatcache</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Wywo³ywanie systemowych <systemitem>stat</systemitem> lub
     <systemitem>lstat</systemitem> w wiêkszo¶ci systemów jest
     zbyt kosztowne. Dlatego, wynik ostatniego wywo³ania ka¿dej z funkcji
     statusowej (przedstawionej poni¿ej) jest przechowywany do wykorzystania
     go przy nastêpnym wywo³aniu funkcji z t± sam± nazw± pliku.
     Je¶li chcesz wymusiæ ponowne sprawdzenie statusu, pliku który jest
     sprawdzany wielokrotnie i móg³ siê zmieniæ lub znikn±æ, u¿yj tej
     funkcji aby wyczy¶ciæ wyniki ostatniego wywo³ania tych funkcji z pamiêci.
    </para>
    <para>
     Te warto¶ci s± cachowane tylko przez czas dzia³ania pojedynczego wywo³ania.
    </para>
    <para>
     Dotyczy funkcji <function>stat</function>,
     <function>lstat</function>,
     <function>file_exists</function>,
     <function>is_writable</function>,
     <function>is_readable</function>,
     <function>is_executable</function>,
     <function>is_file</function>,
     <function>is_dir</function>,
     <function>is_link</function>,
     <function>filectime</function>,
     <function>fileatime</function>,
     <function>filemtime</function>,
     <function>fileinode</function>,
     <function>filegroup</function>,
     <function>fileowner</function>,
     <function>filesize</function>,
     <function>filetype</function> i
     <function>fileperms</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.copy">
   <refnamediv>
    <refname>copy</refname>
    <refpurpose>Kopiuje plik</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>copy</function></funcdef>
      <paramdef>string <parameter>¼ród³o</parameter></paramdef>
      <paramdef>string <parameter>przeznaczenie</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Tworzy kopiê pliku. Zwraca &true; je¶li kopiowanie powiod³o siê,
     &false; w przeciwnym przypadku.
     <example>
      <title><function>copy</function> przyk³ad</title>
      <programlisting role="php">
<![CDATA[
if (!copy($file, $file.'.bak')) {
    print ("Kopiowanie pliku nie powiod³o siê...<br>\n");
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Patrz tak¿e: <function>rename</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.delete">
   <refnamediv>
    <refname>delete</refname>
    <refpurpose>¦lepy wpis</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>delete</function></funcdef>
      <paramdef>string <parameter>plik</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     To jest ¶lepy wpis aby zadowoliæ ludzi którzy szukaj±
     <function>unlink</function> lub
     <function>unset</function> w nie w³a¶ciwym miejscu.
    </para>
    <para>
     Patrz tak¿e: <function>unlink</function> do kasowania plików,
     <function>unset</function> do kasowania zmiennych.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.dirname">
   <refnamediv>
    <refname>dirname</refname>
    <refpurpose>Zwraca nazwê katalogu, bêd±cego sk³adow± ¶cie¿ki</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>dirname</function></funcdef>
      <paramdef>string <parameter>¶cie¿ka</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Z podanego ³añcucha zawieraj±cego ¶cie¿kê do pliku, funkcja ta
     zwróci nazwê katalogu.
     </para>
    <para>
     W Windows jako separator ¶cie¿ki u¿ywany jest znak slash
     (<literal>/</literal>) i backslash (<literal>\</literal>).  W
     innych ¶rodowiskach jest to slash (<literal>/</literal>).
    </para>
    <para>
     <example>
      <title><function>dirname</function> przyk³ad</title>
      <programlisting role="php">
<![CDATA[
$path = "/etc/passwd";
$file = dirname ($path); // $file zawiera "/etc"
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Patrz tak¿e: <function>basename</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.disk-free-space">
   <refnamediv>
    <refname>disk_free_space</refname>
    <refpurpose>Zwraca ilo¶æ wolnego miejsca w katalogu</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>disk_free_space</function></funcdef>
      <paramdef>string <parameter>katalog</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Podaj±c ³añcuch zawieraj±cy katalog, funkcja zwróci ilo¶æ wolnego
     miejsca (w bajtach) w odpowiadaj±cym mu systemie plików lub
     partycji dysku.
    </para>
    <para>
     <example>
      <title><function>disk_free_space</function> przyk³ad</title>
      <programlisting role="php">
<![CDATA[
$df = disk_free_space("/"); // $df zawiera ilo¶æ wolnego (w bajtach) miejsca
                          // w "/"
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.diskfreespace">
   <refnamediv>
    <refname>diskfreespace</refname>
    <refpurpose>Alias do <function>disk_free_space</function></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>diskfreespace</function></funcdef>
      <paramdef>string <parameter>katalog</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     To jest odradzany alias do
     <function>disk_free_space</function>.
     U¿yj tej funkcji zamiast niego.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.disk-total-space">
   <refnamediv>
    <refname>disk_total_space</refname>
    <refpurpose>Zwraca ca³kowity rozmiar katalogu</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>float <function>disk_total_space</function></funcdef>
      <paramdef>string <parameter>katalog</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Podaj±c ³añcuch zawieraj±cy katalog, funkcja ta zwróci
     ca³kowity rozmiar (w bajtach) w odpowiadaj±cym mu systemie plików
     lub partycji dysku.
    </para>
    <para>
     <example>
      <title><function>disk_total_space</function> przyk³ad</title>
      <programlisting role="php">
<![CDATA[
$df = disk_total_space("/"); // $df zawiera ca³kowit± liczbê bajtów
                             // dostêpn± w "/"
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fclose">
   <refnamediv>
    <refname>fclose</refname>
    <refpurpose>Zamyka otwarty wska¼nik pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>fclose</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Wska¼nik pliku <parameter>fp</parameter> jest zamykany.
    </para>
    <para>
     Zwraca &true; gdy sukces i &false; gdy niepowodzenie.
   </para>
    <para>
     Wska¼nik pliku musi byæ poprawny i musi wskazywaæ na plik
     poprawnie otwarty przez <function>fopen</function> lub
     <function>fsockopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.feof">
   <refnamediv>
    <refname>feof</refname>
    <refpurpose>Sprawdza czy wska¼nik pliku jest na koñcu pliku (EOF)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>feof</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca &true; je¶li wska¼nik pliku jest na EOF lub gdy zdarzy siê b³±d;
     w przeciwnym wypadku zwraca &false;.
    </para>
    <para>
     Wska¼nik pliku musi byæ poprawny i musi wskazywaæ na plik
     poprawnie otwarty przez <function>fopen</function>,
     <function>popen</function> lub <function>fsockopen</function>.
   </para>
   </refsect1>
  </refentry>

  <refentry id="function.fflush">
   <refnamediv>
    <refname>fflush</refname>
    <refpurpose>Flushes the output to a file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fflush</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     This function forces a write of all buffered output to the
     to the resource pointed to by the file handle
     <parameter>fp</parameter>. Returns &true; if succesful, &false;
     otherwise.
    </para>
    <para>
     The file pointer must be valid, and must point to a file
     successfully opened by <function>fopen</function>,
     <function>popen</function>, or <function>fsockopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetc">
   <refnamediv>
    <refname>fgetc</refname>
    <refpurpose>Pobiera znak ze wska¼nika pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>fgetc</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca ³añcuch zawieraj±cy pojedynczy znak odczytany z
     pliku wskazanego przez fp.
     Zwraca &false; gdy EOF (koniec pliku).
    </para>
    <para>
     Wska¼nik pliku musi byæ poprawny i musi wskazywaæ na plik
     poprawnie otwarty przez <function>fopen</function> lub
     <function>fsockopen</function>.
   </para>
    <para>
     Patrz tak¿e <function>fread</function>, <function>fopen</function>,
     <function>popen</function>, <function>fsockopen</function> i
     <function>fgets</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetcsv">
   <refnamediv>
    <refname>fgetcsv</refname>
    <refpurpose>
     Pobiera liniê ze wskanika pliku i przetwarza na pola CSV
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>fgetcsv</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>d³ugo¶æ</parameter></paramdef>
      <paramdef>string
       <parameter>
        <optional>delimiter</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Dzia³a podobnie do <function>fgets</function> tylko, ¿e
     <function>fgetcsv</function> przetwarza odczytan± liniê na pola
     w formacie <acronym>CSV</acronym> i zwraca tablicê zawieraj±c±
     odczytane pola.  Delimiterem pól jest przecinek, chyba ¿e
     okre¶lisz inny delimiter w opcjonalnym 3 parametrze.
    </simpara>
    <simpara>
     <parameter>Fp</parameter> musi byæ poprawnym wska¼nikiem do pliku
     poprawnie otworzonym przez <function>fopen</function> lub
     <function>fsockopen</function>.
    </simpara>
    <simpara>
     D³ugo¶æ musi byæ wiêksza ni¿ najd³u¿sza linia znajduj±ca siê
     w pliku CSV (wliczaj±c w to znaki koñca linii).
    </simpara>
    <simpara>
     <function>fgetcsv</function> zwraca &false; gdy wyst±pi b³±d, w³±czaj±c
     w to koniec pliku.
    </simpara>
    <simpara>
     Nota bene. Pusta linia w pliku CSV zostanie zwrócona jako tablica
     sk³adaj±ca siê z pojedynczego pola &null; i nie zostanie potraktowana
     jako b³±d.
    </simpara>
    <example>
     <title>
      <function>fgetcsv</function> przyk³ad - Odczyt i wy¶wietlenie ca³ej
      zawarto¶ci pliku CSV
     </title>
     <programlisting role="php">
<![CDATA[
$row = 1;
$fp = fopen ("test.csv","r");
while ($data = fgetcsv ($fp, 1000, ",")) {
    $num = count ($data);
    print "<p> $num pola w linii $row: <br>";
    $row++;
    for ($c=0; $c < $num; $c++) {
        print $data[$c] . "<br>";
    }
}
fclose ($fp);
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.fgets">
   <refnamediv>
    <refname>fgets</refname>
    <refpurpose>Pobiera liniê ze wska¼nika pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>fgets</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>d³ugo¶æ</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca ³añcuch o d³ugo¶ci - 1 bajtów odczytany z pliku wskazanego
     przez fp. Czytanie koñczy siê kiedy przeczytano d³ugo¶æ - 1 bajtów
     lub gdy wyst±pi znak nowej linii (jest on do³±czany do zwracanego
     wyniku) lub gdy wyst±pi znak koñca pliku EOF (którykolwiek
     przypadek zdarzy siê pierwszy).
    </para>
    <para>
     W przypadku b³êdu, zwraca &false;.
    </para>
    <para>
     G³ówna pu³apka:
    </para>
    <simpara>
     Osoby u¿ywaj±ce semantyki 'C' z fgets powinni zauwa¿yæ ró¿nicê
     w sposobie zwracania EOF.
    </simpara>
    <simpara>
     Wska¼nik pliku musi byæ poprawny i musi wskazywaæ na plik
     poprawnie otwarty przez <function>fopen</function>,
     <function>popen</function> lub
     <function>fsockopen</function>.
   </simpara>
    <para>
     Prosty przyk³ad:
     <example>
      <title>Czytanie pliku linia po linii</title>
      <programlisting role="php">
<![CDATA[
$fd = fopen ("/tmp/inputfile.txt", "r");
while (!feof ($fd)) {
    $buffer = fgets($fd, 4096);
    echo $buffer;
}
fclose ($fd);
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Patrz tak¿e <function>fread</function>, <function>fopen</function>,
     <function>popen</function>, <function>fgetc</function>,
     <function>fsockopen</function> i
     <function>socket_set_timeout</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fgetss">
   <refnamediv>
    <refname>fgetss</refname>
    <refpurpose>
     Pobiera liniê ze wska¼nika pliku i usuwa tagi HTML
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>fgetss</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>d³ugo¶æ</parameter></paramdef>
      <paramdef>string
       <parameter>
        <optional>dozwolone_tagi</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dzia³a identycznie jak <function>fgets</function>, tylko ¿e fgetss
     dokonuje usuniêcia wszystkich tagów HTML i PHP z tektu, który
     przeczyta.
    </para>
    <para>
     Mo¿esz okre¶liæ opcjonalny 3 parametr aby wyszczególniæ tagi, które
     nie powinny zostaæ usuniête.
     <note>
      <para>
       <parameter>dozwolone_tagi</parameter> zosta³ dodany w PHP 3.0.13,
       PHP4B3.
      </para>
     </note>
    </para>
    <para>
     Patrz tak¿e <function>fgets</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function> i
     <function>strip_tags</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.file">
   <refnamediv>
    <refname>file</refname>
    <refpurpose>Czyta ca³± zawarto¶æ pliku do tablicy</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>file</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
      <paramdef>int
       <parameter><optional>u¿yj_include_path</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Dzia³a identycznie jak <function>readfile</function>, tylko ¿e
     <function>file</function> zwraca plik w tablicy. Ka¿dy
     element tablicy odpowiada linii w pliku. Elementy tablicy zawieraj±
     znak nowej linii.
    </para>
    <para>
     Mo¿esz u¿yæ opcjonalnego 2 parametru i ustawiæ go na "1", je¶li
     chcesz szukaæ pliku tak¿e w
     <link linkend="ini.include-path">include_path</link>.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
// pobiera stronê WWW do tablicy i wy¶wietla j±
$fcontents = file ('http://www.php.net');
while (list ($line_num, $line) = each ($fcontents)) {
    echo "<b>Linia $line_num:</b>; " . htmlspecialchars ($line) . "<br>\n";
}

// pobiera stronê WWW i zapisuje do ³añcucha
$fcontents = join ('', file ('http://www.php.net'));
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Patrz tak¿e <function>readfile</function>,
     <function>fopen</function>, <function>fsockopen</function> i
     <function>popen</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.file-exists">
   <refnamediv>
    <refname>file_exists</refname>
    <refpurpose>Sprawdza czy plik istnieje</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>file_exists</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Zwraca &true; je¶li podany plik w parametrze
     <parameter>nazwa_pliku</parameter> istnieje; &false; w przeciwnym wypadku.
    </simpara>
    <simpara>
     Ta funkcja nie dzia³a <link
     linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
    <simpara>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </simpara>
   </refsect1>
  </refentry>


  <refentry id="function.fileatime">
   <refnamediv>
    <refname>fileatime</refname>
    <refpurpose>Pobiera ostatni czas dostêpu do pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fileatime</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Zwraca czas, kiedy nast±pi³ ostatni dostêp do pliku lub &false; w
     przypadku b³êdu. Czas jest zwracany w postaci unix'owego znacznika
     czasu.
     </simpara>
    <simpara>
      Wyniki tej funkcji s± cachowane. Zobacz
      <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </simpara>
    <simpara>
     Notka: Czas dostêpu do pliku przypuszczalnie zmienia siê
     zawsze kiedy bloki danych pliku s± odczytywane. To mo¿e
     kosztowaæ utratê wydajno¶ci aplikacji, która regularnie
     korzystaj± z wielu plików lub katalogów. Niektóre unix'owe
     systemy plików mog± byæ montowane z wy³±czonym uaktualnianiem
     czasu dostêpu, aby podnie¶æ wydajno¶æ takich aplikacji;
     USENETowy katalog roboczy wiadomo¶ci s± powszechnym przyk³adem.
     Na takich systemach plików ta funkcja bêdzie bezu¿yteczna.
    </simpara>
    <simpara>
     Ta funkcja nie dzia³a <link
     linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filectime">
   <refnamediv>
    <refname>filectime</refname>
    <refpurpose>Gets inode change time of file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>filectime</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Returns the time the file was last changed, or &false; in case of
     an error. The time is returned as a Unix timestamp.
    </para>
    <para>
     The results of this function are cached. See
     <function>clearstatcache</function> for more details.
    </para>
    <para>
     Note: In most Unix filesystems, a file is considered
     changed when its inode data is changed; that is, when
     the permissions, owner, group, or other metadata
     from the inode is updated. See also
     <function>filemtime</function> (which is what you want to use
     when you want to create "Last Modified" footers on web pages) and
     <function>fileatime</function>.
    </para>
    <para>Note also that in some Unix texts the ctime of a file is
     referred to as being the creation time of the file. This is wrong.
     There is no creation time for Unix files in most Unix filesystems.
    </para>
    <simpara>
     This function will not work on <link
     linkend="features.remote-files">remote files</link>; the file to
     be examined must be accessible via the server's filesystem.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filegroup">
   <refnamediv>
    <refname>filegroup</refname>
    <refpurpose>Pobiera grupê pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>filegroup</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca identyfikator grupy do której nale¿y w³a¶ciciel pliku lub
     &false; w przypadku b³êdu. Identyfikator grupy zwracany jest
     w postaci numerycznej, u¿yj
     <function>posix_getgrgid</function> aby rozwin±æ go w nazwê grupy.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <note>
     <simpara>
     Ta funkcja nie dzia³a w systemach Windows.
     </simpara>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.fileinode">
   <refnamediv>
    <refname>fileinode</refname>
    <refpurpose>Pobiera i-wêze³ pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fileinode</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca numer i-wêz³a pliku lub &false; w przypadku b³êdu.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
    <note>
     <simpara>
     Ta funkcja nie dzia³a w systemach Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.filemtime">
   <refnamediv>
    <refname>filemtime</refname>
    <refpurpose>Pobiera czas ostatniej modyfikacji pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>filemtime</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca czas, kiedy plik by³ ostatnio modyfikowany lub &false; w przypadku
     b³êdu. Czas jest zwracany w postaci unix'owego znacznika czasu.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
    <para>Notka: Ta funkcja zwraca czas kiedy bloki danych pliku zosta³y
     zapisane, to jest, czas kiedy zawarto¶æ pliku zosta³a zmieniona.
     U¿yj <function>date</function> na wyniku tej funkcji aby otrzymaæ
     czyteln± datê modyfikacji do u¿ycia jej w stopkach stron.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fileowner">
   <refnamediv>
    <refname>fileowner</refname>
    <refpurpose>Pobiera w³a¶ciciela pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fileowner</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca identyfikator u¿ytkownika, który jest w³a¶cicielem pliku, lub
     &false; w przypadku b³êdu. Identyfikator u¿ytkownika zwracany jest
     w postaci numerycznej, u¿yj
     <function>posix_getpwuid</function> aby rozwin±æ go w nazwê u¿ytkownika.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
    <note>
     <simpara>
      Ta funkcja nie dzia³a w systemach Windows.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.fileperms">
   <refnamediv>
    <refname>fileperms</refname>
    <refpurpose>Pobiera prawa dostêpu pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fileperms</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca prawa dostêpu pliku, lub &false; w przypadku b³êdu.
    </para>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.filesize">
   <refnamediv>
    <refname>filesize</refname>
    <refpurpose>Pobiera rozmiar pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>filesize</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca rozmiar pliku, lub &false; w przypadku b³êdu.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.filetype">
   <refnamediv>
    <refname>filetype</refname>
    <refpurpose>Pobiera typ pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>filetype</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca typ pliku. Mo¿liwe warto¶ci to fifo, char, dir, block,
     link, file, and unknown.</para> <para> Zwraca &false;
     w przypadku b³êdu.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.flock">
   <refnamediv>
    <refname>flock</refname>
    <refpurpose>Portable advisory file locking</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>flock</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>operation</parameter></paramdef>
      <paramdef>int
       <parameter>
        <optional>wouldblock</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     PHP supports a portable way of locking complete files in an
     advisory way (which means all accessing programs have to use the
     same way of locking or it will not work).
    </simpara>
    <simpara>
     <function>flock</function> operates on <parameter>fp</parameter>
     which must be an open file
     pointer. <parameter>operation</parameter> is one of the following
     values:
    </simpara>
    <para>
     <itemizedlist>
      <listitem>
       <simpara>
         To acquire a shared lock (reader), set
         <parameter>operation</parameter> to LOCK_SH (set to 1 prior to
         PHP 4.0.1).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
         To acquire an exclusive lock (writer), set
         <parameter>operation</parameter> to LOCK_EX (set to 2 prior to
         PHP 4.0.1).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
         To release a lock (shared or exclusive), set
         <parameter>operation</parameter> to LOCK_UN (set to 3 prior to
         PHP 4.0.1).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
         If you don't want <function>flock</function> to block while
         locking, add LOCK_NB (4 prior to PHP 4.0.1) to
         <parameter>operation</parameter>.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <simpara>
     <function>flock</function> allows you to perform a simple
     reader/writer model which can be used on virtually every platform
     (including most Unices and even Windows).  The optional 3rd
     argument is set to &true; if the lock would block (EWOULDBLOCK
     errno condition)
    </simpara>
    <simpara>
     <function>flock</function> returns &true; on success and &false; on
     error (e.g. when a lock could not be acquired).
    </simpara>
    <warning>
     <para>
      On most operation systems <function>flock</function> is implemented
      at the process level. When using a multithreaded server API like
      ISAPI you cannot rely on <function>flock</function> to protect
      files against other PHP scripts running in parallel threads of the
      same server instance!
     </para>
    </warning>
   </refsect1>
  </refentry>

  <refentry id="function.fopen">
   <refnamediv>
    <refname>fopen</refname>
    <refpurpose>Otwiera plik lub URL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fopen</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
      <paramdef>string <parameter>tryb</parameter></paramdef>
      <paramdef>int
       <parameter>
        <optional>u¿yj_include_path</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Je¶li <parameter>nazwa_pliku</parameter> zaczyna siê od "http://" (nie
     jest rozró¿niana wielo¶æ liter), jest otwierane po³±czenie HTTP 1.0
     do wybranego serwera, strona jest ¿±dana u¿ywaj±c metody HTTP GET
     i wska¼nik pliku jest ustawiany na pocz±tku cia³a odpowiedzi.
     Nag³ówek 'Host:' jest wysy³any z ¿±daniem pozwalaj±cym
     uchwyciæ oparte o nazwê wirtualne hosty.
    </simpara>
    <simpara>
     Zauwa¿, ¿e wska¼nik pliku pozwala tobie wydobyæ tylko
     <emphasis>cia³o</emphasis> odpowiedzi; Nie mo¿esz
     dostaæ siê do nag³ówka HTTP u¿ywaj±c tej funkcji.
    </simpara>
    <simpara>
     Wersje przed PHP 4.0.5 nie obs³uguj± przekierowañ HTTP. Z tego powodu
     katalogi musz± zawieraæ koñcz±ce slashe.
    </simpara>
    <simpara>
     Je¶li <parameter>nazwa_pliku</parameter> zaczyna siê od "ftp://"
     (nie jest rozró¿niana wielko¶æ znaków), jest otwierane po³±czenie
     ftp do podanego serwera i zwracany jest wska¼nik do ¿±danego pliku.
     je¶li serwer nie obs³uguje trybu pasywnego ftp, ta funkcja zawiedzie.
     Mo¿esz otwieraæ pliki albo do odczytu lub zapisu przez ftp (ale nie
     oba tryby równocze¶nie).
    </simpara>
    <simpara>
     Je¶li <parameter>nazwa_pliku</parameter> jest jedn± z mo¿liwo¶ci
     "php://stdin", "php://stdout" lub "php://stderr" zostanie otworzony
     odpowiedni strumieñ stdio.  (To zosta³o wprowadzone w PHP 3.0.13;
     w wcze¶niejszych wersjach, aby dostaæ siê do strumienia stdio
     nazwa_pliku musi mieæ postaæ "/dev/stdin" lub "/dev/fd/0".)
    </simpara>
    <simpara>
     Je¶li <parameter>nazwa_pliku</parameter> zaczyna siê czymkolwiek innym
     zostanie otworzony plik z systemu plików i zostanie zwrócony wska¼nik
     pliku.
    </simpara>
    <simpara>
     Je¶li otwieranie zwiedzie, funkcja zwróci &false;.
    </simpara>
    <para>
     <parameter>tryb</parameter> mo¿e byæ dowolny z poni¿szych:
     <itemizedlist>
      <listitem>
       <simpara>
        'r' - Otwórz tylko do odczytu; ustawia wska¼nik pliku na pocz±tku
        pliku.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'r+' - Otwórz do odczytu i zapisu;  ustawia wska¼nik pliku na pocz±tku
        pliku.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'w' - Otwórz tylko do zapisu; ustawia wska¼nik pliku na pocz±tku
        pliku i obcina plik (zeruje) do 0 d³ugo¶ci.
        Je¶li plik nie istnieje to próbuje go utworzyæ.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        'w+' - Otwórz do odczytu i zapisu; ustawia wska¼nik pliku na pocz±tku
        pliku i obcina plik (zeruje) do 0 d³ugo¶ci.
        Je¶li plik nie istnieje to próbuje go utworzyæ.
      </simpara>
      </listitem>
      <listitem>
       <simpara>
        'a' - Otwórz tylko do zapisu; ustawia wska¼nik pliku na koñcu
        pliku. Je¶li plik nie istnieje to próbuje go utworzyæ.
      </simpara>
      </listitem>
      <listitem>
       <simpara>
        'a+' - Otwórz do odczytu i zapisu; ustawia wska¼nik pliku na koñcu
        pliku. Je¶li plik nie istnieje to próbuje go utworzyæ.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <note>
     <para>
      Parametr <parameter>tryb</parameter> mo¿e zawieraæ literê
      'b'. To jest u¿yteczne tylko na systemach, które rozró¿niaj±
      pliki pomiêdzy binarne i tekstowe (np. Windows. To jest
      bezu¿yteczne na Unixach)
      Je¶li nie potrzebne zostanie zignorowane.
     </para>
    </note>
    <para>
     Mo¿esz u¿yæ opcjonalnego 3 parametru i ustawiæ go na "1", je¶li
     chcesz szukaæ pliku tak¿e w
     <link linkend="ini.include-path">include_path</link>.
    </para>
    <para>
     <example>
      <title><function>fopen</function> przyk³ad</title>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("/home/rasmus/file.txt", "r");
$fp = fopen ("/home/rasmus/file.gif", "wb");
$fp = fopen ("http://www.php.net/", "r");
$fp = fopen ("ftp://user:password@example.com/", "w");
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Je¶li do¶wiadczasz problemów z czytaniem i zapisywaniem do plików
     i u¿ywasz PHP jako modu³ serwera, pamiêtaj, ¿e pliki i katalogi
     które u¿ywasz musz± byæ osi±galne dla procesu serwera.
    </simpara>
    <para>
     Na platformach Windows, uwa¿aj na zastosowanie znaków ucieczki
     dla wszystkich u¿ytych w ¶cie¿ce do pliku backslashy, lub
     u¿yj slash'y.
     <informalexample>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("c:\\data\\info.txt", "r");
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Patrz tak¿e <function>fclose</function>,
     <function>fsockopen</function>,
     <function>socket_set_timeout</function> i
     <function>popen</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fpassthru">
   <refnamediv>
    <refname>fpassthru</refname>
    <refpurpose>
     Output all remaining data on a file pointer
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fpassthru</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Reads to EOF on the given file pointer and writes the results to
     standard output.
    </simpara>
    <simpara>
     If an error occurs, <function>fpassthru</function> returns
     &false;.
    </simpara>
    <simpara>
     The file pointer must be valid, and must point to a file
     successfully opened by <function>fopen</function>,
     <function>popen</function>, or <function>fsockopen</function>.
     The file is closed when <function>fpassthru</function> is done
     reading it (leaving <parameter>fp</parameter> useless).
    </simpara>
    <simpara>
     If you just want to dump the contents of a file to stdout you may
     want to use the <function>readfile</function>, which saves you
     the <function>fopen</function> call.
    </simpara>
    <simpara>
     See also <function>readfile</function>,
     <function>fopen</function>, <function>popen</function>, and
     <function>fsockopen</function>
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fputs">
   <refnamediv>
    <refname>fputs</refname>
    <refpurpose>Zapisuje do wska¼nika pliku</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fputs</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>string <parameter>str</parameter></paramdef>
      <paramdef>int
       <parameter>
        <optional>d³ugo¶æ</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>fputs</function> jest aliasem do
     <function>fwrite</function>, i jest identyczna w ka¿dym przypadku.  Zauwa¿,
     ¿e parametr <parameter>d³ugo¶æ</parameter> jest opcjonalny i je¶li
     go nie podasz to ca³y ³añcuch zostanie zapisany.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fread">
   <refnamediv>
    <refname>fread</refname>
    <refpurpose>Odczyt plików binarnie bezpieczny</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>fread</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>d³ugo¶æ</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>fread</function> odczytuje do
     <parameter>d³ugo¶æ</parameter> bajtów ze wska¼nika pliku
     <parameter>fp</parameter>. Czytanie koñczy siê gdy
     odczytano ju¿ <parameter>d³ugo¶æ</parameter> bajtów
     lub osi±gniêto EOF, cokolwiek nast±pi pierwsze.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
// pobierz zawarto¶æ pliku do ³añcucha
$filename = "/usr/local/something.txt";
$fd = fopen ($filename, "r");
$contents = fread ($fd, filesize ($filename));
fclose ($fd);
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      W systemach, które rozró¿niaj± pliki na binarne i tekstowe
      (np. Windows) plik musi zostaæ otworzony z 'b' w³±czonym do
      parametru tryb funkcji <function>fopen</function>.
     </para>
    </note>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$filename = "c:\\files\\somepic.gif";
$fd = fopen ($filename, "rb");
$contents = fread ($fd, filesize ($filename));
fclose ($fd);
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Patrz tak¿e <function>fwrite</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>,
     <function>fgets</function>, <function>fgetss</function>,
     <function>fscanf</function>, <function>file</function> i
     <function>fpassthru</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.fscanf">
   <refnamediv>
    <refname>fscanf</refname>
    <refpurpose>Przetwarza dane z pliku wed³ug formatu</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>fscanf</function></funcdef>
      <paramdef>int <parameter>uchwyt</parameter></paramdef>
      <paramdef>string <parameter>format</parameter></paramdef>
      <paramdef>string
       <parameter><optional>war1</optional></parameter>...
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Funkcja <function>fscanf</function> jest podobna do
     <function>sscanf</function>, ale pobiera dane wej¶ciowe z pliku
     skojarzonego z <parameter>uchwyt</parameter>em i interpretuje je
     zgodnie z podanych <parameter>format</parameter>em.
     Je¶li tylko dwa parametry zostan± podane do funkcji, przetworzone
     warto¶ci zostan± zwrócone w tablicy.
     W przeciwnym razie, je¶li opcjonalne parametry zostan± podane,
     funkcja zwróci numer przypisany do warto¶ci. Opcjonalny parametr
     musi byæ podawany przez referencje.
     <example>
      <title><function>fscanf</function> Przyk³ad</title>
      <programlisting role="php">
<![CDATA[
$fp = fopen ("users.txt","r");
while ($userinfo = fscanf ($fp, "%s\t%s\t%s\n")) {
    list ($name, $profession, $countrycode) = $userinfo;
    //... zrób co¶ z warto¶ciami
}
fclose($fp);
]]>
      </programlisting>
     </example>
     <example>
      <title>users.txt</title>
      <programlisting>
<![CDATA[
javier  argonaut        pe
hiroshi sculptor        jp
robert  slacker us
luigi   florist it
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Patrz tak¿e <function>fread</function>, <function>fgets</function>,
     <function>fgetss</function>, <function>sscanf</function>,
     <function>printf</function> i <function>sprintf</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fseek">
   <refnamediv>
    <refname>fseek</refname>
    <refpurpose>Seeks on a file pointer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fseek</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>offset</parameter></paramdef>
      <paramdef>int
       <parameter><optional>whence</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Sets the file position indicator for the file referenced by
     <parameter>fp</parameter>.The new position, measured in bytes
     from the beginning of the file, is obtained by adding
     <parameter>offset</parameter> to the position specified by
     <parameter>whence</parameter>, whose values are defined as
     follows:
     <simplelist>
      <member>SEEK_SET - Set position equal to
      <parameter>offset</parameter> bytes.</member> <member>SEEK_CUR -
      Set position to current location plus
      <parameter>offset</parameter>.</member> <member>SEEK_END - Set
      position to end-of-file plus
      <parameter>offset</parameter>.</member>
     </simplelist>
    </para>
    <para>If <parameter>whence is not specified, it is assumed to be
    SEEK_SET.</parameter>
    </para>
    <para>
     Upon success, returns 0; otherwise, returns -1. Note that seeking
     past EOF is not considered an error.
    </para>
    <para>
     May not be used on file pointers returned by
     <function>fopen</function> if they use the "http://" or "ftp://"
     formats.
    </para>
    <note>
     <para>
      The <parameter>whence</parameter> argument was added after PHP 4.0 RC1.
     </para>
    </note>
    <para>
     See also <function>ftell</function> and
     <function>rewind</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fstat">
   <refnamediv>
    <refname>fstat</refname>
    <refpurpose>
     Pobiera informacje o pliku u¿ywaj±c otwartego wska¼nika pliku
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>fstat</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zbiera statystyki otwartego pliku przez wska¼nik pliku fp.
     Ta funkcja jest podobna do funkcji
     <function>stat</function> z wyj±tkiem tego, ¿e operuje na otwartym
     wska¼niku pliku zamiast na nazwiê pliku.
    </para>
    <para>
     Zwraca tablicê ze statystyk± pliku z nastêpuj±cymi elementami:
     <orderedlist>
      <listitem><simpara>urz±dzenie</simpara></listitem>
      <listitem><simpara>i-wêze³</simpara></listitem>
      <listitem><simpara>liczba dowi±zañ</simpara></listitem>
      <listitem><simpara>identyfikator w³a¶ciciela</simpara></listitem>
      <listitem><simpara>identyfikator grupy w³a¶ciciela</simpara></listitem>
      <listitem><simpara>typ urz±dzenia (je¶li urz±dzenie inode)*</simpara></listitem>
      <listitem><simpara>rozmiar w bajtach</simpara></listitem>
      <listitem><simpara>czas ostatniego dostêpu</simpara></listitem>
      <listitem><simpara>czas ostatniej modyfikacji</simpara></listitem>
      <listitem><simpara>czas ostatniej zmiany</simpara></listitem>
      <listitem><simpara>rozmiar bloku w systemie plików I/O *</simpara></listitem>
      <listitem><simpara>liczba przydzielonych bloków</simpara></listitem>
     </orderedlist>
     * - poprawny tylko w systemach obs³uguj±cych type st_blksize -- inne systemy
     (np. Windows) zwracaj± -1</para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ftell">
   <refnamediv>
    <refname>ftell</refname>
    <refpurpose>Tells file pointer read/write position</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ftell</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Returns the position of the file pointer referenced by fp; i.e.,
     its offset into the file stream.
    </para>
    <para>
     If an error occurs, returns &false;.
    </para>
    <para>
     The file pointer must be valid, and must point to a file
     successfully opened by <function>fopen</function> or
     <function>popen</function>.
    </para>
    <para>
     See also <function>fopen</function>, <function>popen</function>,
     <function>fseek</function> and <function>rewind</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ftruncate">
   <refnamediv>
    <refname>ftruncate</refname>
    <refpurpose>
     Przycina plik do podanej d³ugo¶ci.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ftruncate</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>rozmiar</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Pobiera wska¼nik pliku, fp, i przycina plik do d³ugo¶ci, rozmiar.
     Funkcja zwraca &true; gdy sukces i &false; gdy niepowodzenie.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fwrite">
   <refnamediv>
    <refname>fwrite</refname>
    <refpurpose>Binary-safe file write</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fwrite</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>string <parameter>string</parameter></paramdef>
      <paramdef>int
       <parameter>
        <optional>length</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>fwrite</function> writes the contents of
     <parameter>string</parameter> to the file stream pointed to by
     <parameter>fp</parameter>. If the <parameter>length</parameter>
     argument is given, writing will stop after
     <parameter>length</parameter> bytes have been written or the end
     of <parameter>string</parameter> is reached, whichever comes
     first.
    </simpara>
    <simpara>
     Note that if the <parameter>length</parameter> argument is given,
     then the <link
     linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link>
     configuration option will be ignored and no slashes will be
     stripped from <parameter>string</parameter>.
    </simpara>
    <note>
     <para>
      On systems which differentiate between binary and text files
      (i.e. Windows) the file must be opened with 'b' included in
      <function>fopen</function> mode parameter.
     </para>
    </note>
    <simpara>
     See also <function>fread</function>, <function>fopen</function>,
     <function>fsockopen</function>, <function>popen</function>, and
     <function>fputs</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.set-file-buffer">
   <refnamediv>
    <refname>set_file_buffer</refname>
    <refpurpose>
     Sets file buffering on the given file pointer
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>set_file_buffer</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
      <paramdef>int <parameter>buffer</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Output using <function>fwrite</function> is normally buffered at
     8K.  This means that if there are two processess wanting to write
     to the same output stream (a file), each is paused after 8K of
     data to allow the other to write.  <function>set_file_buffer</function>
     sets the buffering for write operations on the given filepointer
     <parameter>fp</parameter> to <parameter>buffer</parameter> bytes.
     If <parameter>buffer</parameter> is 0 then write operations are
     unbuffered.  This ensures that all writes with
     <function>fwrite</function> are completed before other processes
     are allowed to write to that output stream.
    </simpara>
    <simpara>
     The function returns 0 on success, or EOF if the request cannot
     be honored.
    </simpara>
    <para>
     The following example demonstrates how to use
     <function>set_file_buffer</function> to create an unbuffered stream.
     <example>
      <title><function>set_file_buffer</function> example</title>
      <programlisting role="php">
<![CDATA[
$fp=fopen($file, "w");
if($fp){
  set_file_buffer($fp, 0);
  fputs($fp, $output);
  fclose($fp);
}
]]>
      </programlisting>
     </example>
    </para>

    <simpara>
     See also <function>fopen</function>, <function>fwrite</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.is-dir">
   <refnamediv>
    <refname>is_dir</refname>
    <refpurpose>Mówi czy nazwa_pliku jest katalogiem</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_dir</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca &true; je¶li nazwa_pliku istnieje i jest katalogiem.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
    <para>
     Patrz tak¿e <function>is_file</function> i
     <function>is_link</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-executable">
   <refnamediv>
    <refname>is_executable</refname>
    <refpurpose>Mówi czy plik jest wykonywalny</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_executable</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca &true; je¶li plik istnieje i jest wykonywalny.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
    <para>
     Patrz tak¿e <function>is_file</function> i
     <function>is_link</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-file">
   <refnamediv>
    <refname>is_file</refname>
    <refpurpose>
     Mówi czy nazwa_pliku jest zwyk³ym plikiem
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_file</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca &true; jesli nazwa_pliku istnieje i jest zwyk³ym plikiem.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <para>
     Patrz tak¿e <function>is_dir</function> i
     <function>is_link</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-link">
   <refnamediv>
    <refname>is_link</refname>
    <refpurpose>
     Mówi czy nazwa_pliku jest dowi±zaniem symbolicznym
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_link</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Zwraca &true; je¶li nazwa_pliku istnieje i jest dowi±zaniem symbolicznym.
    </para>
    <para>
     Wyniki tej funkcji s± cachowane. Zobacz
     <function>clearstatcache</function> aby uzyskaæ wiêcej szczegó³ów.
    </para>
    <para>
     Patrz tak¿e <function>is_dir</function> i
     <function>is_file</function>.
    </para>
    <simpara>
     Ta funkcja nie dzia³a
     <link linkend="features.remote-files">na zdalnych plikach</link>; sprawdzany
     plik musi byæ dostêpny przez system plików serwera.
    </simpara>
    <note>
     <simpara>
      Ta funkcja nie dzia³a w systemach Windows.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.is-readable">
   <refnamediv>
    <refname>is_readable</refname>
    <refpurpose>
     Tells whether the filename is readable
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_readable</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Returns &true; if the filename exists and is readable.
    </para>
    <para>
     Keep in mind that PHP may be accessing the file as the user
     id that the web server runs as (often 'nobody'). Safe mode
     limitations are not taken into account.
    </para>
    <para>
     The results of this function are cached. See
     <function>clearstatcache</function> for more details.
    </para>
    <simpara>
     This function will not work on <link
     linkend="features.remote-files">remote files</link>; the file to
     be examined must be accessible via the server's filesystem.
    </simpara>
    <para>
     See also <function>is_writable</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-writable">
   <refnamediv>
    <refname>is_writable</refname>
    <refpurpose>Tells whether the filename is writable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_writable</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Returns &true; if the filename exists and is writable.  The
     filename argument may be a directory name allowing you to check
     if a directory is writeable.
    </para>
    <para>
     Keep in mind that PHP may be accessing the file as the user id
     that the web server runs as (often 'nobody'). Safe mode
     limitations are not taken into account.
    </para>
    <para>
     The results of this function are cached. See
     <function>clearstatcache</function> for more details.
    </para>
    <simpara>
     This function will not work on <link
     linkend="features.remote-files">remote files</link>; the file to
     be examined must be accessible via the server's filesystem.
    </simpara>
    <para>
     See also <function>is_readable</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-writeable">
   <refnamediv>
    <refname>is_writeable</refname>
    <refpurpose>Tells whether the filename is writable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_writeable</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     This is an alias for <function>is_writable</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.is-uploaded-file">
   <refnamediv>
    <refname>is_uploaded_file</refname>
    <refpurpose>Mówi czy plik zosta³ przys³any przez HTTP POST.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_uploaded_file</function></funcdef>
      <paramdef>string <parameter>nazwa_pliku</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     Ta funkcja jest dostêpna tylko w wersjach PHP 3 pó¼niejszych od
     3.0.16 i w wersjach PHP 4 pó¼niejszych od 4.0.2.
    </para>

    <para>
     Zwraca &true; je¶li plik o nazwie <varname>nazwa_pliku</varname>
     zosta³ przys³any (upload) przez HTTP POST. To pomaga upewniæ siê,
     czy z³o¶liwy u¿ytkownik nie próbuje oszukaæ skryptu pracuj±cego
     na plikach, tak aby dzia³a³ on na plikach na których nie powinien
     -- na przyk³ad
     <filename>/etc/passwd</filename>.
    </para>

    <para>
     Ten rodzaj testów jest szczególnie wa¿ny je¶li istnieje szansa, ¿e
     cokolwiek robimy z przys³anymi plikami mo¿e zdradziæ ich
     tre¶æ u¿ytkownikowi lub nawet innym u¿ytkownikom tego samego
     systemu.
    </para>

    <para>
     Patrz tak¿e <function>move_uploaded_file</function> i sekcjê
     <link linkend="features.file-upload">Handling file uploads</link>
     aby zobaczyæ przyk³adowe skrypty.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.link">
   <refnamediv>
    <refname>link</refname>
    <refpurpose>Create a hard link</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>link</function></funcdef>
      <paramdef>string <parameter>target</parameter></paramdef>
      <paramdef>string <parameter>link</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <function>link</function> creates a hard link.</para>
    <para>
     See also the <function>symlink</function> to create soft links,
     and <function>readlink</function> along with
     <function>linkinfo</function>.
    </para>
    <note>
     <simpara>
     This function does not work on Windows systems
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.linkinfo">
   <refnamediv>
    <refname>linkinfo</refname>
    <refpurpose>Gets information about a link</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>linkinfo</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>linkinfo</function> returns the st_dev field of the
     UNIX C stat structure returned by the lstat system call.  This
     function is used to verify if a link (pointed to by
     <parameter>path</parameter>) really exists (using the same method
     as the S_ISLNK macro defined in stat.h).  Returns 0 or &false; in
     case of error.
    </para>
    <para>
     See also <function>symlink</function>, <function>link</function>,
     and <function>readlink</function>.
    </para>
    <note>
     <simpara>
     This function does not work on Windows systems
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.mkdir">
   <refnamediv>
    <refname>mkdir</refname>
    <refpurpose>Makes directory</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mkdir</function></funcdef>
      <paramdef>string <parameter>pathname</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Attempts to create the directory specified by pathname.
    </para>
    <para>
     Note that you probably want to specify the mode as an
     octal number, which means it should have a leading zero.
     The mode is also modified by the current umask, which you
     can change using <function>umask</function>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
mkdir ("/path/to/my/dir", 0700);
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Returns &true; on success and &false; on failure.
    </para>
    <para>
     See also <function>rmdir</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.move-uploaded-file">
   <refnamediv>
    <refname>move_uploaded_file</refname>
    <refpurpose>Moves an uploaded file to a new location.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>move_uploaded_file</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>string <parameter>destination</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>
     This function is available only in versions of PHP 3 after PHP
     3.0.16, and in versions of PHP 4 after 4.0.2.
    </para>

    <para>
     This function checks to ensure that the file designated by
     <parameter>filename</parameter> is a valid upload file (meaning
     that it was uploaded via PHP's HTTP POST upload mechanism). If
     the file is valid, it will be moved to the filename given by
     <parameter>destination</parameter>.
    </para>

    <para>
     If <parameter>filename</parameter> is not a valid upload file,
     then no action will occur, and
     <function>move_uploaded_file</function> will return
     &false;. 
    </para>

    <para>
     If <parameter>filename</parameter> is a valid upload file, but
     cannot be moved for some reason, no action will occur, and
     <function>move_uploaded_file</function> will return
     &false;. Additionally, a warning will be issued.
    </para>

    <para>
     This sort of check is especially important if there is any chance
     that anything done with uploaded files could reveal their
     contents to the user, or even to other users on the same
     system.
    </para>

    &note.sm.uidcheck;

    <para>
     See also <function>is_uploaded_file</function>, and the section
     <link linkend="features.file-upload">Handling file uploads</link>
     for a simple usage example.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.parse-ini-file">
   <refnamediv>
    <refname>parse_ini_file</refname>
    <refpurpose>Parse a configuration file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>parse_ini_file</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>bool 
       <parameter>
        <optional>process_sections</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>parse_ini_file</function> loads in the
     ini file specified in <parameter>filename</parameter>,
     and returns the settings in it in an associative array.
     By setting the last <parameter>process_sections</parameter>
     parameter to &true;, you get a multidimensional array, with
     the section names and settings included. The default
     for <parameter>process_sections</parameter> is &false;
    </para>
    <note>
     <para>
      This function has nothing to do with the
      <filename>php.ini</filename> file. It is already processed,
      the time you run your script. This function can be used to
      read in your own application's configuration files.
     </para>
    </note>
    <para>
     The structure of the ini file is similar to that of
     the <filename>php.ini</filename>'s.
    </para>
    <para>
     <example>
      <title>Contents of sample.ini</title>
      <programlisting>
<![CDATA[
; This is a sample configuration file
; Comments start with ';', as in php.ini

[first_section]
one = 1
five = 5

[second_section]
path = /usr/local/bin
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title><function>parse_ini_file</function> example</title>
      <programlisting>
<![CDATA[
<?php

// Parse without sections
$ini_array = parse_ini_file("sample.ini");
print_r($ini_array);

// Parse with sections
$ini_array = parse_ini_file("sample.ini", TRUE);
print_r($ini_array);

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Would produce:
     <informalexample>
      <programlisting>
<![CDATA[
Array
(
    [one] => 1
    [five] => 5
    [path] => /usr/local/bin
)
Array
(
    [first_section] => Array
        (
            [one] => 1
            [five] => 5
        )

    [second_section] => Array
        (
            [path] => /usr/local/bin
        )

)
]]>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pathinfo">
   <refnamediv>
    <refname>pathinfo</refname>
    <refpurpose>Returns information about a file path</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>pathinfo</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>pathinfo</function> returns an associative array
     containing information about <parameter>path</parameter>.  The
     following array elements are returned:
     <parameter>dirname</parameter>, <parameter>basename</parameter>
     and <parameter>extension</parameter>.
    </para>
    <para>
     <example>
      <title><function>pathinfo</function> Example</title>
      <programlisting role="php">
<![CDATA[
<?php

$path_parts = pathinfo("/www/htdocs/index.html");

echo $path_parts["dirname"] . "\n";
echo $path_parts["basename"] . "\n";
echo $path_parts["extension"] . "\n";

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Would produce:
     <informalexample>
      <programlisting>
<![CDATA[
/www/htdocs
index.html
html
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     See also <function>dirname</function>,
     <function>basename</function>, <function>parse_url</function>
     and <function>realpath</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pclose">
   <refnamediv>
    <refname>pclose</refname>
    <refpurpose>Closes process file pointer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>pclose</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Closes a file pointer to a pipe opened by
     <function>popen</function>.
    </para>
    <para>
     The file pointer must be valid, and must have been returned by a
     successful call to <function>popen</function>.
    </para>
    <para>
     Returns the termination status of the process that was
     run.
    </para>
    <para>
     See also <function>popen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.popen">
   <refnamediv>
    <refname>popen</refname>
    <refpurpose>Opens process file pointer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>popen</function></funcdef>
      <paramdef>string <parameter>command</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Opens a pipe to a process executed by forking the command given
     by command.
    </para>
    <para>
     Returns a file pointer identical to that returned by
     <function>fopen</function>, except that it is unidirectional (may
     only be used for reading or writing) and must be closed with
     <function>pclose</function>. This pointer may be used with
     <function>fgets</function>, <function>fgetss</function>, and
     <function>fputs</function>.
    </para>
    <para>
     If an error occurs, returns &false;.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
$fp = popen ("/bin/ls", "r");
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     See also <function>pclose</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.readfile">
   <refnamediv>
    <refname>readfile</refname>
    <refpurpose>Outputs a file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>readfile</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>int
       <parameter>
        <optional>use_include_path</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Reads a file and writes it to standard output.
    </para>
    <para>
     Returns the number of bytes read from the file. If an error
     occurs, &false; is returned and unless the function was called as
     @readfile, an error message is printed.
    </para>
    <para>
     If <parameter>filename</parameter> begins with "http://"
     (not case sensitive), an HTTP 1.0 connection is opened to the
     specified server and the text of the response is written to
     standard output.
    </para>
    <para>
     Versions prior to PHP 4.0.5 do not handle HTTP redirects. Because
     of this, directories must include trailing slashes.
    </para>
    <para>
     If <parameter>filename</parameter> begins with "ftp://"
     (not case sensitive), an ftp connection to the specified server is
     opened and the requested file is written to standard output. If the server
     does not support passive mode ftp, this will fail.
    </para>
    <para>
     If <parameter>filename</parameter> begins with neither
     of these strings, the file will be opened from the filesystem and
     its contents written to standard output.
    </para>
    <para>
     You can use the optional second parameter and set it to "1", if
     you want to search for the file in the <link
     linkend="ini.include-path">include_path</link>, too.
    </para>
    <para>
     See also <function>fpassthru</function>,
     <function>file</function>, <function>fopen</function>,
     <function>include</function>, <function>require</function>, and
     <function>virtual</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.readlink">
   <refnamediv>
    <refname>readlink</refname>
    <refpurpose>Returns the target of a symbolic link</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>readlink</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
    <function>readlink</function> does the same as the readlink C
    function and returns the contents of the symbolic link path or 0
    in case of error.
    </para>
    <para>
     See also <function>symlink</function>,
     <function>readlink</function> and
     <function>linkinfo</function>.
    </para>
    <note>
     <simpara>
     This function does not work on Windows systems
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.rename">
   <refnamediv>
    <refname>rename</refname>
    <refpurpose>Renames a file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>rename</function></funcdef>
      <paramdef>string <parameter>oldname</parameter></paramdef>
      <paramdef>string <parameter>newname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Attempts to rename <parameter>oldname</parameter> to
     <parameter>newname</parameter>.
    </para>
    <para>
     Returns &true; on success and &false; on failure.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rewind">
   <refnamediv>
    <refname>rewind</refname>
    <refpurpose>Rewind the position of a file pointer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>rewind</function></funcdef>
      <paramdef>int <parameter>fp</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Sets the file position indicator for fp to the beginning of the
     file stream.</para> <para> If an error occurs, returns 0.</para>
     <para> The file pointer must be valid, and must point to a file
     successfully opened by <function>fopen</function>.
    </para>
    <para>
     See also <function>fseek</function> and
     <function>ftell</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.rmdir">
   <refnamediv>
    <refname>rmdir</refname>
    <refpurpose>Removes directory</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>rmdir</function></funcdef>
      <paramdef>string <parameter>dirname</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Attempts to remove the directory named by pathname. The directory
     must be empty, and the relevant permissions must permit.
     this.
    </para>
    <para>
     If an error occurs, returns 0.
    </para>
    <para>
     See also <function>mkdir</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.stat">
   <refnamediv>
    <refname>stat</refname>
    <refpurpose>Gives information about a file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>stat</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gathers the statistics of the file named by filename.
    </para>
    <para>
     Returns an array with the statistics of the file with the
     following elements:
     <orderedlist>
      <listitem><simpara>device</simpara></listitem>
      <listitem><simpara>inode</simpara></listitem>
      <listitem><simpara>inode protection mode</simpara></listitem>
      <listitem><simpara>number of links</simpara></listitem>
      <listitem><simpara>user id of owner</simpara></listitem>
      <listitem><simpara>group id owner</simpara></listitem>
      <listitem><simpara>device type if inode device *</simpara></listitem>
      <listitem><simpara>size in bytes</simpara></listitem>
      <listitem><simpara>time of last access</simpara></listitem>
      <listitem><simpara>time of last modification</simpara></listitem>
      <listitem><simpara>time of last change</simpara></listitem>
      <listitem><simpara>blocksize for filesystem I/O *</simpara></listitem>
      <listitem><simpara>number of blocks allocated</simpara></listitem>
     </orderedlist>
     * - only valid on systems supporting the st_blksize type--other
     systems (i.e. Windows) return -1.
    </para>
    <para>
     Returns &false; in case of error.
    </para>
    <para>
     <function>stat</function> doesn't handle URL as does <function>fopen</function>.
    </para>
    <para>
     The results of this function are cached. See
     <function>clearstatcache</function> for more details.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.lstat">
   <refnamediv>
    <refname>lstat</refname>
    <refpurpose>
     Gives information about a file or symbolic link
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>lstat</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Gathers the statistics of the file or symbolic link named by
     filename.  This function is identical to the
     <function>stat</function> function except that if the
     <parameter>filename</parameter> parameter is a symbolic link, the
     status of the symbolic link is returned, not the status of the
     file pointed to by the symbolic link.
    </para>
    <para>
     Returns an array with the statistics of the file with the
     following elements:
     <orderedlist>
      <listitem><simpara>device</simpara></listitem>
      <listitem><simpara>inode</simpara></listitem>
      <listitem><simpara>inode protection mode</simpara></listitem>
      <listitem><simpara>number of links</simpara></listitem>
      <listitem><simpara>user id of owner</simpara></listitem>
      <listitem><simpara>group id owner</simpara></listitem>
      <listitem><simpara>device type if inode device *</simpara></listitem>
      <listitem><simpara>size in bytes</simpara></listitem>
      <listitem><simpara>time of last access</simpara></listitem>
      <listitem><simpara>time of last modification</simpara></listitem>
      <listitem><simpara>time of last change</simpara></listitem>
      <listitem><simpara>blocksize for filesystem I/O *</simpara></listitem>
      <listitem><simpara>number of blocks allocated</simpara></listitem>
     </orderedlist>
     * - only valid on systems supporting the st_blksize type--other
     systems (i.e. Windows) return -1</para>
    <para>
     The results of this function are cached. See
     <function>clearstatcache</function> for more details.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.realpath">
   <refnamediv>
    <refname>realpath</refname>
    <refpurpose>Returns canonicalized absolute pathname</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>realpath</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>realpath</function> expands all symbolic links and
     resolves references to '/./', '/../' and extra '/' characters in
     the input <parameter>path</parameter> and return the canonicalized
     absolute pathname.  The resulting path will have no symbolic link,
     '/./' or '/../' components.
    </para>
    <para>
     <example>
      <title><function>realpath</function> example</title>
      <programlisting role="php">
<![CDATA[
$real_path = realpath ("../../index.php");
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.symlink">
   <refnamediv>
    <refname>symlink</refname>
    <refpurpose>Creates a symbolic link</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>symlink</function></funcdef>
      <paramdef>string <parameter>target</parameter></paramdef>
      <paramdef>string <parameter>link</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>symlink</function> creates a symbolic link
     from the existing <parameter>target</parameter> with
     the specified name <parameter>link</parameter>.
    </para>
    <para>
     See also <function>link</function> to create hard links,
     and <function>readlink</function> along with
     <function>linkinfo</function>.
    </para>
    <note>
     <simpara>
      This function does not work on Windows systems.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.tempnam">
   <refnamediv>
    <refname>tempnam</refname>
   <refpurpose>Create file with unique file name</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>tempnam</function></funcdef>
      <paramdef>string <parameter>dir</parameter></paramdef>
      <paramdef>string <parameter>prefix</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Creates a file with a unique filename in the specified directory.
     If the directory does not exist, <function>tempnam</function> may
     generate a file in the system's temporary directory, and return
     the name of that.
    </para>
    <para>
     Prior to PHP 4.0.6, the behaviour of the
     <function>tempnam</function> function was system dependent. On
     Windows the TMP environment variable will override the
     <parameter>dir</parameter> parameter, on Linux the TMPDIR
     environment variable has precedence, while SVR4 will always use
     your <parameter>dir</parameter> parameter if the directory it
     points to exists. Consult your system documentation on the
     tempnam(3) function if in doubt.
    </para>
    <para>
     Returns the new temporary filename, or the &false; string on
     failure.
     <example>
      <title><function>tempnam</function> example</title>
      <programlisting role="php">
<![CDATA[
$tmpfname = tempnam ("/tmp", "FOO");

$fp = fopen($tmpfname, "w");
fwrite($fp, "writing to tempfile");
fclose($fp);

// do here something

unlink($tmpfname);
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      This function's behavior changed in 4.0.3. The temporary file is also
      created to avoid a race condition where the file might appear in the
      filesystem between the time the string was generated and before the
      the script gets around to creating the file. Note, that you need
      to remove the file in case you need it no more, it is not done
      automatically.
     </simpara>
    </note>
    <para>
     See also <function>tmpfile</function>, <function>unlink</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.tmpfile">
   <refnamediv>
    <refname>tmpfile</refname>
    <refpurpose>Creates a temporary file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>tmpfile</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     Creates a temporary file with an unique name in write mode,
     returning a file handle similar to the one returned by
     <function>fopen</function>.
     The file is automatically removed when closed (using
     <function>fclose</function>), or when the script ends.
    </para>
    <para>
     For details, consult your system documentation on the
     <literal>tmpfile(3)</literal> function, as well as the
     <filename>stdio.h</filename> header file.
    </para>
    <para>
     <example>
      <title><function>tmpfile</function> example</title>
      <programlisting role="php">
<![CDATA[
$temp = tmpfile();
fwrite($temp, "writing to tempfile");
fclose($temp); // this removes the file
]]>
      </programlisting>
     </example>
    </para>
    <para>
     See also <function>tempnam</function>.
    </para>
   </refsect1>
  </refentry>


  <refentry id="function.touch">
   <refnamediv>
    <refname>touch</refname>
    <refpurpose>Sets modification time of file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>touch</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
      <paramdef>int
        <parameter>
         <optional>time</optional>
        </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Attempts to set the modification time of the file named by
     filename to the value given by time. If the option time is not
     given, uses the present time.
    </para>
    <para>
     If the file does not exist, it is created.
    </para>
    <para>
     Returns &true; on success and &false; otherwise.
     <example>
      <title><function>touch</function> example</title>
      <programlisting role="php">
<![CDATA[
if (touch ($FileName)) {
    print "$FileName modification time has been
           changed to todays date and time";
} else {
    print "Sorry Could Not change modification time of $FileName";
}
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.umask">
   <refnamediv>
    <refname>umask</refname>
    <refpurpose>Changes the current umask</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>umask</function></funcdef>
      <paramdef>int <parameter>mask</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>umask</function> sets PHP's umask to mask &amp; 0777 and
     returns the old umask. When PHP is being used as a server module,
     the umask is restored when each request is finished.
    </para>
    <para>
     <function>umask</function> without arguments simply returns the
     current umask.
    </para>
    <note>
     <simpara>
      This function may not work on Windows systems.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.unlink">
   <refnamediv>
    <refname>unlink</refname>
    <refpurpose>Deletes a file</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>unlink</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Deletes <parameter>filename</parameter>.  Similar to the Unix C
     unlink() function.
    </para>
    <para>
     Returns 0 or &false; on an error.
    </para>
    <para>
     See also <function>rmdir</function> for removing directories.
    </para>
    <note>
     <simpara>
      This function may not work on Windows systems.
     </simpara>
    </note>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
