<?xml version="1.0" encoding="iso-8859-2"?>
<!-- EN-Revision: n/a Maintainer: mroq Status: ready -->
<!-- $Revision$ -->
<!-- CREDITS: slawek -->
<refentry xml:id="function.mysql-real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Dodaje znaki unikowe dla potrzeb poleceñ SQL, bior±c po uwagê zestaw znaków u¿ywany w po³±czeniu.</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>³añcuch_bez_znaków_unikowych</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>identyfikator_po³±czeniar</parameter></methodparam>
  </methodsynopsis>
  <para>
   Dodaje znaki unikowe do <parameter>³añcucha_bez_znaków_unikowych</parameter>, 
   maj±c na uwadze aktualnie u¿ywany w po³±czeniu zestaw znaków by tak przygotowanego ³añcucha
   mo¿na bezpiecznie u¿yc w funkcji <function>mysql_query</function>. Je¶li dopisywane 
   dane maj± postaæ binarn± wymagane jest u¿ycie tej funkcji.
  </para>
  <para>
   <function>mysql_real_escape_string</function> wywo³uje funkcjê biblioteki MySQL
   mysql_real_escape_string, która dodaje lewe uko¶niki (backslash) do nastêpuj±cych znaków:
   <literal>\x00</literal>, <literal>\n</literal>,
   <literal>\r</literal>, <literal>\</literal>, <literal>'</literal>,
   <literal>"</literal> and <literal>\x1a</literal>.
  </para>
  <para>
   U¿ycie tej funkcji jest wymagane zawsze (poza kilkoma wyj±tkami) przed wys³aniem
   zapytania do bazy danych aby zabezpieczyæ dane. 
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>³añcuch_bez_znaków_unikowych</parameter></term>
     <listitem>
      <para>
       £añcuch, do którego zostan± dodane znaki unikowe.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca ³añcuch ze znakami unikowymi lub &false; w przypadku b³êdu.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Prosty przyk³ad u¿ycia <function>mysql_real_escape_string</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Connect
$link = mysql_connect('host', 'uzytkownik', 'haslo')
    OR die(mysql_error());

// Zapytanie
$query = sprintf("SELECT * FROM uzytkownicy WHERE uzytkownik='%s' AND haslo='%s'",
            mysql_real_escape_string($uzytkownik),
            mysql_real_escape_string($haslo));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Przyk³ad ataku SQL Injection</title>
    <programlisting role="php">
<![CDATA[
<?php
// Zapytanie pobieraj±ce pasuj±cych u¿ytkowników
$query = "SELECT * FROM uzytkownicy WHERE uzytkownik='{$_POST['nazwa_uzytkownika']}' AND haslo='{$_POST['haslo']}'";
mysql_query($query);

// Nie sprawdzili¶my zmiennej $_POST['haslo'], która mo¿e zawieraæ wszystko czego chcia³ u¿ytkownik! Na przyk³ad:
$_POST['nazwa_uzytkownika'] = 'aidan';
$_POST['haslo'] = "' OR ''='";

// Oznacza to, ¿e zapytanie ma postaæ:
echo $query;
?>
]]>
    </programlisting>
     <para>
      Zapytanie wys³ane do bazy danych: 
     </para>
    <screen>
<![CDATA[
SELECT * FROM users WHERE user='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
     Zapytanie to pozwala zalogowaæ siê ka¿demu bez znajomo¶ci poprawnego has³a.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>Dobra praktyka tworzenia zapytañ</title>
    <para>
     U¿ycie <function>mysql_real_escape_string</function> na ka¿dej zmiennej
     zapobiegnie atakom SQL Injection. Przyk³ad ten demonstruje dobr± praktykê
     tworzenia zapytañ, niezale¿n± od ustawieñ 
     <link linkend="security.magicquotes">Magic Quotes</link>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

if (isset($_POST['nazwa_produktu']) && isset($_POST['opis_produktu']) && isset($_POST['id_uzytkownika'])) {
    // Po³±cz

    $link = mysql_connect('host', 'uzytkownik', 'haslo');

    if(!is_resource($link)) {

        echo "Nie uda³o siê po³±czyæ z serwerem\n";
        // ... logowanie b³êdów

    } else {
        
        // Odwróæ efekty dzia³ania magic_quotes_gpc/magic_quotes_sybase na zmiennych je¶li opcje te s± W£¡CZONE.

        if(get_magic_quotes_gpc()) {
            $nazwa_produktu = stripslashes($_POST['nazwa_produktu']);
            $opis_produktu  = stripslashes($_POST['opis_produktu']);
        } else {
            $nazwa_produktu = $_POST['nazwa_produktu'];
            $opis_produktu  = $_POST['opis_produktu'];
        }

        // Stwórz bezpieczne zapytanie
        $query = sprintf("INSERT INTO products (`nazwa`, `opis`, `id_uzytkownika`) VALUES ('%s', '%s', %d)",
                    mysql_real_escape_string($nazwa_produktu, $link),
                    mysql_real_escape_string($opis_produktu, $link),
                    $_POST['id_uzytkownika']);

        mysql_query($query, $link);

        if (mysql_affected_rows($link) > 0) {
            echo "Produkt zosta³ dopisany\n";
        }
    }
} else {
    echo "Wype³nij poprawnie formularz\n";
}
?>
]]>
    </programlisting>
    <para>
     Od teraz zapytanie bêdzie poprawne wykonywane, podczas gdy ataki SQL Injection nie bêd± dzia³aæ.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Przed u¿yciem <function>mysql_real_escape_string</function> nale¿y otworzyæ
    po³±czenie z baz± danych, w innym przypadku b³±d poziomu <literal>E_WARNING</literal>
    zostanie wygenerowany i zwrócona zostanie warto¶æ false.
    Je¶li <parameter>identyfikator_po³±czenia</parameter> nie zosta³ zdefiniowany zostanie
    u¿yte ostatnie po³±czenie z baz± danych.
   </para>
  </note>
  <note>
   <para>
    Je¶li opcja <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> zosta³a w³±czona,
    najpierw na danych nale¿y u¿yæ <function>stripslashes</function>. U¿ycie tej funkcji samej
    spowoduje, ¿e do danych zostan± dodane podwójne znaki unikowe.
   </para>
  </note>
  <note>
   <para>
    Je¶li funkcja ta nie zostanie u¿yta na danych, zapytanie bêdzie podatne
    na ataki <link linkend="security.database.sql-injection">SQL Injection Attacks</link>.
   </para>
  </note>
  <note>
   <simpara>
    <function>mysql_real_escape_string</function> nie dodaje znaków unikowych
    do <literal>%</literal> i <literal>_</literal>. Maski te (wildcard) s± stosowane
    w zapytaniach MySQL w po³±czeniu z <literal>LIKE</literal>, <literal>GRANT</literal>
    lub <literal>REVOKE</literal>.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_client_encoding</function></member>
    <member><function>addslashes</function></member>
    <member><function>stripslashes</function></member>
    <member>The <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> directive</member>
    <member>The <link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link> directive</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
