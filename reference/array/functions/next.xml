<?xml version="1.0" encoding="iso-8859-2"?>
<!-- EN-Revision: 1.8 Maintainer: leszek Status: ready -->
<!-- $Revision: 1.6 $ -->
  <refentry id="function.next">
   <refnamediv>
    <refname>next</refname>
    <refpurpose>
     Przesuñ do przodu wewnêtrzny wska¼nik tablicy
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
     <methodsynopsis>
      <type>mixed</type><methodname>next</methodname>
      <methodparam><type>array</type><parameter role="reference">tablica</parameter></methodparam>
     </methodsynopsis>
    <para>
     Przesuwa wewnêtrzny wska¼nik tablicy i jedn± pozycjê do przodu i zwraca
     element tablicy aktualnie wskazywany przez wska¼nik, lub &false; je¶li
     nie ma ju¿ wiêcej elementów.
    </para>
    <para>
     <function>next</function> zachowuje siê jak
     <function>current</function>, ale z jedn± ró¿nic±. Przesuwa wewnêtrzny
     wska¼nik tablicy o jeden element do przodu przed zwróceniem warto¶ci
     elementu. Oznacza to, ¿e zwraca nastêpny element tablicy i przesuwa
     wewnêtrzny wska¼nik tablicy o jeden element do przodu. Je¶li przesuniêcie
     wewnêtrznego wska¼nika tablicy powoduje przesuniêcie poza koniec listy
     elementów, <function>next</function> zwraca &false;.
     <warning>
      <para>
       Je¶li tablica zawiera puste elementy lub elementy które maj± klucze o
       warto¶ci 0, to funkcja bêdzie zwracaæ warto¶æ
       rozpoznawan± jako &false; tak¿e dla tych elementów (wiêcej informacji
       mo¿na znale¼æ w rozdzia³ach <link
        linkend="language.types.boolean.casting">konwertowanie do typu
        boolean</link> i <link linkend="types.comparisons">tablice porównania
        typów</link>).  Aby prawid³owo przej¶æ przez tablicê, która mo¿e
       zawieraæ puste elementy, nale¿y u¿yæ funkcji <function>each</function>.
      </para>
     </warning>
    </para>
    <para>
     <example>
      <title>Przyk³ad u¿ycia funkcji <function>next</function> i podobnych</title>
      <programlisting role="php">
<![CDATA[
<?php
$transport = array('stopa', 'rower', 'samochód', 'samolot');
$tryb = current($transport); // $tryb = 'stopa';
$tryb = next($transport);    // $tryb = 'rower';
$tryb = next($transport);    // $tryb = 'samochód';
$tryb = prev($transport);    // $tryb = 'rower';
$tryb = end($transport);     // $tryb = 'samolot';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Patrz tak¿e: <function>current</function>, <function>end</function>,
     <function>prev</function> i <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
