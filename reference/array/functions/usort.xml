<?xml version="1.0" encoding="iso-8859-2"?>
<!-- splitted from ./pl/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'usort' in en/ tree in rev 1.2 -->
<!-- EN-Revision: 1.2 Maintainer: leszek Status: ready -->
<!-- OLD-Revision: 1.130/EN.1.2 -->
  <refentry id="function.usort">
   <refnamediv>
    <refname>usort</refname>
    <refpurpose>
     Sortuj tablicê wed³ug warto¶ci korzystaj±c ze zdefiniowanej przez
     u¿ytkownika funkcji porównuj±cej
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
     <methodsynopsis>
      <type>void</type><methodname>usort</methodname>
      <methodparam><type>array</type><parameter>tablica</parameter></methodparam>
      <methodparam><type>string</type><parameter>funkcja_por</parameter></methodparam>
     </methodsynopsis>
    <para>
     Funkcja ta posortuje tablicê wed³ug jej warto¶ci korzystaj±c z podanej
     przez u¿ytkownika funkcji porównuj±cej. Je¶li chcesz posortowaæ tablicê
     wed³ug skomplikowanych kryteriów, to powiniene¶ u¿yæ tej funkcji.
    </para>
    <para>
     Funkcja porównuj±ca musi zwracaæ liczbê ca³kowit± mniejsz±, równ± lub
     wiêksz± od zera je¶li pierwszy argument jest odpowiednio mniejszy, równy
     lub wiêkszy ni¿ drugi. Je¶li dwa elementy tablicy s± równe, to ich
     kolejno¶æ wystêpowania w posortowanej tablicy pozostaje niezdefiniowany.
    </para>
    <para>
     Istenieje tak¿e mo¿liwo¶æ u¿ycia funkcji sk³adowej obiektu jako funkcji
     porównuj±cej. Zobacz przyk³ad nr 3 poni¿ej.
    </para>
    <para>
     <example>
      <title>Przyk³ad u¿ycia <function>usort</function></title>
      <programlisting role="php">
<![CDATA[
function cmp ($a, $b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}

$a = array (3, 2, 5, 6, 1);

usort ($a, "cmp");

while (list ($key, $value) = each ($a)) {
    echo "$key: $value\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Powy¿szy przyk³ad wy¶wietli:
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
0: 6
1: 5
2: 3
3: 2
4: 1
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Oczywi¶cie w prostszych przypadkach lepiej jest skorzystaæ z funkcji
      <function>rsort</function>.
     </para>
    </note>
    <para>
     <example>
      <title>
       Przyk³ad u¿ycia <function>usort</function> do sortowania
       wielowymiarowych tablic
      </title>
      <programlisting role="php">
<![CDATA[
function cmp ($a, $b) {
    return strcmp($a["owoc"], $b["owoc"]);
} 

$owocs[0]["owoc"] = "cytryny";
$owocs[1]["owoc"] = "jab³ka";
$owocs[2]["owoc"] = "winogrona";

usort($owocs, "cmp"); 

while (list ($key, $value) = each ($owocs)) {
    echo "\$owocs[$key]: " . $value["owoc"] . "\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Sortuj±c tablicê wielowymiarow±, $a i $b zawieraj± referencjê do
     pierwszego indeksu tablicy.
    </para>
    <para>
     Ten przyk³ad wy¶wietli:
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
$fruits[0]: cytryny
$fruits[1]: jab³ka
$fruits[2]: winogrona
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     <example>
      <title>
       Przyk³ad u¿ycia <function>usort</function> u¿ywaj±c funkcji sk³adowej
       obiektu
      </title>
      <programlisting role="php">
<![CDATA[
class TestObj {
    var $name;
     
    function TestObj($name)
    {
        $this->name = $name;
    }
    
    /* Statyczna funkcja porównuj±ca */
    function cmp_obj($a, $b) 
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) return 0;
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

uasort($a, array ("TestObj", "cmp_obj"));

foreach ($a as $item) {
    print $item->name."\n";
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Ten przyk³ad wy¶wietli:
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
b
c
d
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     <warning>
      <para>
       U¿ywana do sortowania funkcja quicksort w niektórych bibliotekach C
       (jak na przyk³ad na systemach Solaris) mo¿e spowodowaæ zawieszanie siê
       PHP je¶li funkcja porównuj±ca zwraca niespójne warto¶ci.
      </para>
     </warning>
    </para>
    <para>
     Patrz tak¿e <function>uasort</function>,
     <function>uksort</function>, <function>sort</function>,
     <function>asort</function>,
     <function>arsort</function>,<function>ksort</function>,
     <function>natsort</function> i <function>rsort</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
