<?xml version="1.0" encoding="iso-8859-2"?>
<!-- EN-Revision: 1.16 Maintainer: dombal Status: Ready -->
<!-- $Revision: 1.6 $ -->
<!-- Purpose: basic.vartype -->
<!-- Membership: core -->

 <reference xml:id="ref.classobj" xmlns="http://docbook.org/ns/docbook">
  <title>Klasy/Obiekty</title>
  <titleabbrev>Klasy/Obiekty</titleabbrev>

  <partintro>
   <section xml:id="classobj.intro">
    &reftitle.intro;
    <para>
     Te funkcje pozwalaj± uzyskaæ informacje o klasach i ich egzemplarzach,
     obiektach. Mo¿esz uzyskaæ informacjê o nazwie klasy do jakiej nale¿y
     obiekt, a tak¿e jej w³a¶ciwo¶ci i metody. U¿ywaj±c tych funkcji mo¿esz
     dowiedzieæ siê nie tylko do jakiej klasy nale¿y obiekt, ale tak¿e
     ustaliæ jego przodków (np. jak± klasê rozszerza klasa tego obiektu).
    </para>
   </section>

   <section xml:id="classobj.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   <section xml:id="classobj.installation">
    &reftitle.install;
    &no.install;
   </section>

   <section xml:id="classobj.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section xml:id="classobj.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section xml:id="classobj.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section xml:id="classobj.examples">
    &reftitle.examples;
    <para>
     W tym przyk³adzie najpierw zdefiniujemy bazow± klasê i jej rozszerzenie.
     Klasa bazowa opisuje normalne warzywo, czy jest jadalne czy nie
     oraz jego kolor. Podklasa <varname>Szpinak</varname> dodaje metodê
     pozwalaj±c± go zagotowaæ i drug±, która pozwala dowiedzieæ siê, czy
     jest zagotowany.
    </para>
    <para>
     <example>
      <title>classes.inc</title>
      <programlisting role="php">
<![CDATA[
<?php

// klasa bazowa wraz z jej w³a¶ciwo¶ciami i metodami
class Warzywo {

    var $jadalne;
    var $kolor;

    function Warzywo($jadalne, $kolor="zielony") {
        $this->jadalne = $jadalne;
        $this->kolor = $kolor;
    }

    function czy_jadalne() {
        return $this->jadalne;
    }

    function jaki_kolor() {
        return $this->kolor;
    }

} // koniec klasy Warzywo

// rozrzesza klasê bazow±
class Szpinak extends Warzywo {

    var $ugotowane = false;

    function Szpinak() {
        $this->Warzywo(true, "zielone");
    }

    function ugotuj() {
        $this->ugotowane = true;
    }

    function czy_ugotowane() {
        return $this->ugotowane;
    }

} // koniec klasy Szpinak

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
    Teraz mo¿emy stworzyæ dwa egzemplarze tych klas i wydrukowaæ informacje
    o nich, w³±czaj±c w to informacje o przodkach.
    Zdefiniujemy tak¿e kilka u¿ytecznych funkcji, g³ównie po to by uzyskaæ
    ³adny wydruk zmiennych.
    </para>
    <para>
     <example>
      <title>test_script.php</title>
      <programlisting role="php">
<![CDATA[
<pre>
<?php

include "classes.inc";

// funkcje u¿ytkowe

function drukuj_wlasciwosci($obj) {
    foreach (get_object_vars($obj) as $wlasc => $wart) {
        echo "\t$wlasc = $wart\n";
    }
}

function drukuj_metody($obj) {
    $tab = get_class_methods(get_class($obj));
    foreach ($tab as $metoda) {
        echo "\tfunkcja $metoda()\n";
    }
}

function przodkowie_klasy($obj, $klasa) {
    global $$obj;
    if (is_subclass_of($GLOBALS[$obj], $klasa)) {
        echo "Obiekt $obj nale¿y do klasy ".get_class($$obj);
        echo ", podklasy $klasa\n";
    } else {
        echo "Obiekt $obj nie nale¿y do podklasy $klass\n";
    }
}

// tworzymy 2 egzemplarze obiektów

$warzywko = new Warzywo(true, "niebieski");
$lisciaste = new Szpinak();

// wydrukujemy informacjê o obiektach
echo "warzywko: KLASA ".get_class($warzywko)."\n";
echo "lisciaste: KLASA ".get_class($lisciaste);
echo ", PRZODEK ".get_parent_class($lisciaste)."\n";

// poka¿my w³a¶ciwo¶ci warzywka
echo "\nwarzywko: W³a¶ciwo¶ci\n";
drukuj_wlasciwosci($warzywko);

// i metody li¶ciastego
echo "\nlisciaste: Metody\n";
drukuj_metody($lisciaste);

echo "\nPrzodkowie:\n";
przodkowie_klasy("lisciaste", "Szpinak");
przodkowie_klasy("lisciaste", "Warzywo");
?>
</pre>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Wart± odnotowania rzecz± w powy¿szym przyk³adzie jest to,
     ¿e obiekt <varname>$lisciaste</varname> jest egzemplarzem klasy
     <classname>Szpinak</classname> która to jest podklas± klasy
     <classname>Warzywo</classname>, i tak ostatnia czê¶æ powy¿szego
     skryptu poka¿e na wyj¶ciu:
    </para>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
       [...]
Przodkowie:
Obiekt lisciasty nie nale¿y do podklasy Szpinak
Obiekt lisciasty nale¿y do klasy Szpinak, podklasy Warzywo
]]>
      </programlisting>
     </informalexample>
    </para>
   </section>
  </partintro>
 
&reference.classobj.functions;
 
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

