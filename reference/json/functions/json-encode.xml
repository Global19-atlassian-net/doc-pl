<?xml version="1.0" encoding="iso-8859-2"?>
<!-- EN-Revision: 1.9 Maintainer: joeaccord Status: ready -->
<!-- $Revision: 1.7 $ -->
<refentry xml:id="function.json-encode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_encode</refname>
  <refpurpose>Zwraca JSON reprezentuj±cy warto¶æ</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>json_encode</methodname>
   <methodparam><type>mixed</type><parameter>warto¶æ</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>opcje</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Zwraca ³añcuch JSON reprezentuj±cy
   <parameter>warto¶æ</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>warto¶æ</parameter></term>
     <listitem>
      <para>
       <parameter>warto¶æ</parameter> zostanie zakodowana i mo¿e byæ dowolnego typu
       poza <type>zasobami</type>.
      </para>
      <para>
       Ta funkcja dzia³a tylko na danych zakodowanych w formacie UTF-8 (UNICODE).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>opcje</parameter></term>
     <listitem>
      <para>
       Struktura bitów sk³adaj±ca siê z <constant>JSON_HEX_QUOT</constant>,
       <constant>JSON_HEX_TAG</constant>,
       <constant>JSON_HEX_AMP</constant>,
       <constant>JSON_HEX_APOS</constant>,
       <constant>JSON_FORCE_OBJECT</constant>. Domy¶lnie 0.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   W przypadku powodzenia zwraca zakodowany <type>string</type> JSON.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.1</entry>
       <entry>
        Dodano obs³ugê kodowania podstawowych typów w formacie JSON.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Dodano parametr <parameter>opcje</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przyk³ad <function>json_encode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array ('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5);

echo json_encode($arr);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
{"a":1,"b":2,"c":3,"d":4,"e":5}
]]>
    </screen>
   </example>

   <example>
    <title>Przyk³ad <function>json_encode</function> pokazuje zastosowanie parametru: opcje</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = array('<foo>',"'bar'",'"baz"','&blong&');

echo "Standardowo: ", json_encode($a), "\n";
echo "Znaczniki: ",   json_encode($a,JSON_HEX_TAG), "\n";
echo "Apostrofy: ",   json_encode($a,JSON_HEX_APOS), "\n";
echo "Cudzys³owy: ",   json_encode($a,JSON_HEX_QUOT), "\n";
echo "Znaki et (etki): ",    json_encode($a,JSON_HEX_AMP), "\n";
echo "Wszystkie opcje: ",    json_encode($a,JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_QUOT|JSON_HEX_AMP), "\n\n";

$b = array();

echo "Pusta tablica zwracana jako tablica: ", json_encode($b), "\n";
echo "Pusta tablica zwracana jako obiekt: ", json_encode($b, JSON_FORCE_OBJECT), "\n\n";

$c = array(array(1,2,3));

echo "Nieasocjacyjna tablica zwracana jako tablica: ", json_encode($c), "\n";
echo "Nieasocjacyjna tablica zwracana jako obiekt: ", json_encode($c, JSON_FORCE_OBJECT), "\n\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Standardowo: ["<foo>","'bar'","\"baz\"","&blong&"]
Znaczniki: ["\u003Cfoo\u003E","'bar'","\"baz\"","&blong&"]
Apostrofy: ["<foo>","\u0027bar\u0027","\"baz\"","&blong&"]
Cudzys³owy: ["<foo>","'bar'","\u0022baz\u0022","&blong&"]
Znaki et (etki): ["<foo>","'bar'","\"baz\"","\u0026blong\u0026"]
Wszystkie opcje: ["\u003Cfoo\u003E","\u0027bar\u0027","\u0022baz\u0022","\u0026blong\u0026"]

Pusta tablica zwracana jako tablica: []
Pusta tablica zwracana jako obiekt: {}

Nieasocjacyjna tablica zwracana jako tablica: [[1,2,3]]
Nieasocjacyjna tablica zwracana jako obiekt: {"0":{"0":1,"1":2,"2":3}}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_decode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
