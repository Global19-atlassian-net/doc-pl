<?xml version="1.0" encoding="iso-8859-2"?>
<!-- EN-Revision: 1.7 Maintainer: dombal Status: ready -->
<!-- $Revision: 1.2 $ -->
  <refentry id="function.token-get-all">
   <refnamediv>
    <refname>token_get_all</refname>
    <refpurpose>Dzieli zadane ¼ród³o na tokeny PHP</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Opis</title>
    <methodsynopsis>
     <type>array</type><methodname>token_get_all</methodname>
     <methodparam><type>string</type><parameter>¼ród³o</parameter></methodparam>
    </methodsynopsis>
    <simpara>
     <function>token_get_all</function> parsuje zadane
     <parameter>¼ród³o</parameter>, czyli ci±g znaków zawieraj±cy kod PHP,
     zamieniaj±c je na tokeny jêzyka PHP przy u¿yciu analizy leksykalnej
     silnika Zend. Funkcja ta zwraca tablicê identyfikatorów tokenów. Ka¿dy
     identyfikator tokena jest allbo pojedynczym znakiem (np.:
     <constant>;</constant>, <constant>.</constant>,
     <constant>&gt;</constant>, <constant>!</constant>, itd...), albo
     dwuelementow± tablic± zawieraj±c± indeks tokena w elemencie 0, i
     zawarto¶æ oryginalengo tokena w postaci ci±gu znakowego w elemencie 1.
    </simpara>
    <simpara>
     Listê tokenów identyfikowanych przez parser znajdziesz w <xref
      linkend="tokens"/>, mo¿esz tak¿e u¿yæ funkcji
     <function>token_name</function> by przet³umaczyæ warto¶æ tokena na jego
     nazwê.
    </simpara>
    <example>
     <title>Przyk³ady u¿ycia <function>token_get_all</function></title>
     <programlisting role="php">
<![CDATA[
<?php
  $tokeny = token_get_all('<?php'); // => array(array(T_OPEN_TAG, '<?'));
  $tokeny = token_get_all('<?php echo; ?>'); /* => array(
                                                    array(T_OPEN_TAG, '<?php'), 
                                                    array(T_ECHO, 'echo'),
                                                    ';',
                                                    array(T_CLOSE_TAG, '?>') ); */
.
/* W nastêpnym przyk³adzie zwróæ uwagê na fakt, i¿ ci±g znaków jest parsowany
   jako T_INLINE_HTML, inaczej ni¿ oczekiwane T_COMMENT (T_ML_COMMENT w PHP
   <5). Jest tak z powodu braku w "kodzie" otwieraj±cych/zamykaj±cych tagów
   PHP. Jest to jednoznaczne z komentarzem znajduj±cym siê poza tagami <?php
   ?> w normalnym pliku. */
  $tokeny = token_get_all('/* koment. */'); // => array(array(T_INLINE_HTML, '/* koment. */'));
?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
